<?php
/**
 * @category   Php4u
 * @package    Php4u_BlastLuceneSearch
 * @author     Marcin Szterling <marcin@php4u.co.uk>
 * @copyright  Php4u Marcin Szterling (c) 2011
 * @license http://php4u.co.uk/licence/
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * Any form of ditribution, sell, transfer, reverse engineering forbidden - see licence above
 *
 * Code was obfusacted due to previous licence violations
 */ 
$_F=__FILE__;$_X="$_F=__FILE__;$_X="JF9GPV9fRklMRV9fOyRfWD0iSkY5R1BWOWZSa2xNUlY5Zk95UmZXRDBpU2tZNVIxQldPV1pTYTJ4TlVsWTVaazk1VW1aWFJEQnBVMnRaTlZJeFFsZFBWMXBUWVRKNFRsVnNXVFZhYXprMVZXMWFXRkpFUW5CVk1uUmFUbFpKZUZGc1pGQldNWEJVV1ZSS05GUnNWbk5YVkZaaFlYcHJNVlpYTVdGWFJrcEZVVzVDVjFKWGFIcGFSekZQVm14V2MxTnRiRTVpVmtwT1YxWmFWMU14Um5OYVJsWlVZVEpTVDFWdE5VTlhWbVJ5WVVkR2FHSlZjREJhUldNeFZrWmFWazVWVWxkV2JWSklWVEZhUjFaV1JuUmtSbHBYVWxWd1RsWlVSbGRVTWxKellqTm9VMkV5ZUZOWmJHUnZXVlpTV0U1V1RtbE5WMUo0VlRKNFlWbFZNVWhsUlZaV1ZtMVNjbFp0ZUVwbFYwWkZWR3hXYUUxdGFGbFdNakUwVWpKU1NGWnJhR2hTTTBKUFZGWldkMVF4WkhKWGJYUlZUV3R3U1ZVeU5WTldNa3BIVTIxb1YyRnJTbWhVYkZwclZsWk9kRTVXVm1oTlJGWXpWbFphYjFJeFRuTlRiRnBVWWxSc2FGVnRNVzlXUm14eFUydHdiR0pGTlZsWGExWjNWV3N4UmxkdVZsWk5WbHBYV2xWa1IxTkdVblZWYkZacFlUQndkMWRXV2xkVE1WcFhZMFpvVDFack5YQlZha0V4VFVad1ZtRkZUbWhXTUhCWlZrY3dNVlpzU2xoVWFsSmFWbGRTVUZwRldsTmtWa1owWWtkb1RsSlhPVFpXTVZwWFlqRkdjazFWYUZaaVJrcFFWbXBPUTJOR2NGZFZiRnBzVW0xNFdsbHVjRU5XVjBWM1RsaGtWbFp0YUVoVk1uaExWbXhPZFZKc2NHaGhlbFpGVmtkNGExUXlVa2hUYTJoUFZqSm9WVlZ0ZEdGa1ZsVjRWbTFHVWsxcmJEVldSM1JYVm0xR2NsZHJkRlppUmtwSVdXcEdjbVZWTVZaUFYzQlRUVWhDTTFaV1pEUlZNa3BJVTI1T1ZHSnJOV0ZVVjNCR1RVWnJkMXBGZEd0U2JYUTFWMnRXTkZVd01VVlNhazVXVFZaYVZGVXlNVkprTURGWFZteE9WMVpHV2taWFZscFhVakpXUjFSc1dsZGhNRFZ4VkZkMFlWZFdXa2hOVkZKb1ZqQndlVlJzYUU5V1JscFlWVzVhVlZaWFVsUlZNVnBIVmxaa2NrMVhlRmRTTTJRMlZqRmFWMkl4Um5KTlZXaFdZa1pLVUZacVRrTmpSbkJYVld4YWJGSnRlRnBaV0hCWFlXc3hjbGRzYkZkU2VrVXdXVlprUzFack5WbFViRlpVVWpBMGVsWlljRU5qTVVwSVUxaHNZVkp0VWxSV2FrcHZVMFpWZUZadFJsVk5WbHBJVlRJMVQxWnRTa2hoUms1WFlsaFNNMVZxUms5V2JGcDFWR3hrVTFZemFFbFdWbVEwVkRGYVZrMVdaR3BTV0ZKWFdWUkdZVmRHVm5OV2JrNVRVbXMxZVZVeWVHRmlSbHBXWTBWNFYySkhhSHBWTWpGT1pESktSbHBIUmxOWFJVcFpWbGQ0YTJJeFZsZFhiazVZWWtWd2FGUldXbk5OTVZaMFpVVTVWMkpWVmpOV01uaERWakpGZUdOSWJGaGhhMXBUV2tSR2ExZEdjRWRUYkdSWFVteHdiMVpVUmxkV01ERkhWRzVPVm1KcmNGZFdNRlV4VXpGV2MxZHRSbGhpUm5CWFZqSjBNRlV5U2tkV2FsSlhVbTFTY2xac1ZYaFdiVXBHVDFaS1RtSllhRVJYVkVaWFl6RktkRk5yV2s5V2JIQlVWakJrYjFSR1dsaGxSbVJXWWxVeE0xbHJWbUZoVmtwVllrWk9WVlpYYUhaV2FrWlhZMnhhZFZSc1ZrNVdWemg0Vmxaa01GUXhXWGhYYms1VFlsUldXRlZxVGs1TlZscHpWbTVPVTJKV1drZFpNRnBYVmpGWmVtRkdaRmRXTTJoWVZsZDRkbVZHWkhKWGJFSlRUV3hLV1ZaWGVHdGlNVWw0Vkd4YVdHSllVbE5aYTFwaFpXeFZlV1JGZEZkV01IQklWVEowTUZadFNrZGpSVGxZWVd0YVUxcEVSbXRYUm5CSFZteGtWMkpJUWxaV2JGcFRVVEpKZUZKdVRsWmlhelZYV1ZSQ2QxVXhiRlZUYWxKVllrWldORll5ZUU5WFIwVjZZVVZPVlZaV1dYZFZNbmhHWlZVNVdFNVdXbWxYUmtvMlZtMTRZVlV5VG5OWGJrNVdZa1p3YzFac1ZuZFRWbHB5Vld0a1ZHSkhPVFJWYlhoVFZXMUtSbGRzVGxkaVdGSXpWbTE0Vm1WR1duSlBWbVJwVW10d1NGWlhNVFJVTVU1elUyNUtWR0pIVWxoV2FrNXZVa1phVmxkc1dtdE5WbkJaVjJ0YVMxWXhXa2RYYTJSV1RWWmFWMVJXV2xkU01WWjFVMjFzVTFaSGVGVlhWM1JYWkRGTmVGZHJhR3RTTTFKVVdXdGFTMVl4V25SamVsWlhUVlZaTWxaWE1ERldhekZYVmxoa1dHRnJXbFJaTW5NMVUwWndSMVJzWkdsVFJVcEpWbTEwYTA1R1ZuTmlNMmhYVjBkU2IxVnNWbmRXYkZaellVZDBhV0pHY0hsV2JUQTFWVEpGZUZOc1RscGhhM0J5VmtWa1IxWnNUbkpVYkdScFVtNUNWVlpVUm1GVmJWWkhWRzVPVm1FelFsUldhMlEwVmxaVmVGWnNaRlZOVmxwSVZtMTBhMkZXU25KT1ZsWlhZa2RTVkZVeWVHRmpiRkp5Vkd4U1YySkZXWHBYYkZaWFZqRlZlRmR1U21wU2JGcFZWbXhhWVZSR1ZuUmtTRTVUWWxaYVIxa3dXa3RXTVZwWlVXczVWMVl6YUZCVlZFWktaVVpXV1dGR1VsZE5iRXBVVm0xNFUxWXhiRmRVYkZwWFlYcHNWbFp0ZEdGV01XeHlWbFJHVlZaclZqTlZNblJoVm14YWMxWnFVbFpXTTJoTFdrUkdZV014Vm5KalJrNVhVak5vVmxaVVJsZFdhelZYVjJ4a1ZXRXhjRmhaYTFVeFVteGFWMWw2Vm1saVJURTFXV3RXVDFaV1duSk9WbVJXWWxoU1VGWnJXbUZYVjBaR1pFWmthRTFZUWpWWFdIQkRZekZKZUdORldtbFNhelZZV1d0V2QxTXhXbGhsUjBaVVlrYzVORlpIZUdGVU1VbDVWV3hPVjJKR1NsUlpiWGhYVmpGYWNrOVdaRmRoZWxaWVZrUkdWazVXVG5OVGJGWnBVbGRvVlZac1dtRlZSbHBXVjJ4T2FrMVdXbnBXUjNoTFZqRmFWVlpzWkZkU1ZscFFWVlJHWVZZeFZsbGhSbEpwVW14d1RGWlhlRk5qTVZwSFZHeGFWMVpHV2xoV2JYTXhVakZhZEdWRk9WZE5SRVpKV2xWYVYxWnRTa1pPU0hCWVlXdGFTRlpxUms5amJVNUhWMnMxVTAweWFGSldiR014WXpGRmVGTllhRmRpYTNCUlZteFNWMVJzVmxkVmEwNVZVbXMxVjFaSE5XRlpWVEZYVW1wU1YySllhRmhWTW5oTFZsZEtSbUZHVWxkV2JGVjRWbXhTUTJNeFNuUlRhMXBRVmxoQ1ZGWnNVbGRWYkZweVdraHdUbFpyY0hwVmJHaHZWbTFGZWxGc1dsVldWa3BVV1cxNFlXTldSblZVYkdSWFlYcFdSbFpXWkRSV01WcEhVMnhrVjJKVVZsaFdhMVpHVFZaV2NWSnRSbE5OV0VKSFZUSjRZV0ZGTVZkWGJsWlhZVEZLU0ZVeWVIWmxSbVJ5VjIxb1UxWnVRa3hXVnpFMFdWWmFWMVp1VGxWaE1EVlhWVzE0WVdReFZsaGxSVTVYVFZWd1dWbFZWbXRXTVZsNVpVVlNWbUpHY0V4V2JYaExZMnN4VjFWc1pGZFNiSEJMVm0xNGIyTXhSWGhVYms1V1lsUldUMVZzYUZOVE1WWlZVMVJXYVdKR2NIbFdiVEExVlRKRmVXVkZhRmRTTTJoRVZsUktTMUl4VG5OaVJscFhZa2hDVFZaWE1UQk9SMHB5VFZWYWExSllRbE5VVjNCelpGWmFWMWR0Y0U1V1ZGWlhXV3RXYjFkSFNuTmpTRVphWWtaS1JGbHRlSE5qVms1elkwZEdUbGRGU2twWFYzUlRVVEpHZEZOc2FHeFRSVXBvVlcweGIxWkdhM2RhUlhCc1ZsUldTbFpIZEhkV1JrcFZWbTV3V0ZZelVuSlVWRXBPWkRKS1JtSkdXbWxpV0dob1ZtMDFkMVl3TlhOYVNGSk9WbTFTYzFac1pEUlRWbGw1VGxkR2FHSlZjRmRaTUdoclYwZEZlVlZzVWxwaE1sSk1XVEJrVW1WV2NFaGpSMnhYWWtkM01WWnFTalJpTVUxNVZtNU9hbEpzU2xOWmJHaHZZMFpzYzFwR1RtdE5WM2d3VkZaYWEyRldTWGRPVkVKYVlUSm9XRmRXWkZkV2JFNTFWV3h3YUdGNlZrMVhWbHByVWpGa1IxWnVVbXRTTUZwWVdsZDRTMlJXV2taWGF6bFNUV3hhZWxrd1dtOVdNVmw1Vlc1Q1ZtRnJiekJaTVZwcll6RnNObEp0YUdsVFJVcFdWbFpqZUdJeFpIUlRiRlpvVFRKNFdWbHJWbGROTVZZMlVXNU9VMUl3YkROVWJGWlRZVVphVmxkcVVsWk5WbHBZVmtSS1UyTXlUa1poUm1SWFRXeEtlVlpHWkRCWlZUVnpWR3hhV21Wc1dtOVdiVFZEVFZaYWRFNVlaRmhpUm13elZHdG9hMWRIU2toVmJFNVlZV3RhTTFVeFdtRmtSMVpHWTBaU1UyRXlPVFZXVkVaWFlqRkZlVlpzWkdwU2JYaFpXVzEwUzJOR1VsVlNiVVpQWWtVMVYxZHJVbE5oYkVwMFpFUldWMkpVVmxoV01uTjRZekZhZEU1WFJsTmxhMW8yVjJ0amVGTXhUa2RUYmtaU1lsZG9XRnBYTVRObFJtUlZWRzF3YTAxVk1UTlphMVpUWVZVd2VHTkZXbGRXYlUweFZYcEdSbVZHU25WVGJVWk9Wak5STVZkc1ZtdGlNa1p5VFVoa1RsWjZWbUZaVkVwVFpXeHNXR1ZJWkZoU1ZGWmFXVEJrUjFZeVJuUmxTRnBZVmtWS2RsVlVTazVsVmtwellVWldhVll5YUhsV1YzQkxUa1V4YzJKSVVtbFNWVFZ3VldwR1lWTnNXbGhOVkZKb1ZqQndXRlV5Y0dGV1JscFlZVVZTV2xaV2NETlZNR1JTWlZad1NHVkhlRmRXVjNjeFZtcEdZV0l4VG5OaU0yUnFVbGRTVVZac1ZuZFdiRlp6WVVjNVZsWnNjSGhWVjNoclZURmFkRnBFVWxkU00xSm9WbTB4UzFJeVRrWmFSbVJYVFRKTmVGWlhlR0ZVTVZweldraE9WbUV6UWxSVmExWkxaRlphUjFac1RteGlSemsxVmxjMVUxVXlTblJsUlhSV1ZrVmFURmxzV2xkV01WcHhWV3hXVjJKRldUQldNblJYV1ZaVmVGTnVSbWxTV0ZKWVZteGFjazFXVm5OWGF6bFhZa2RTZWxaWGRIZFZNVXBHVTI1V1YxSnNXbFJhVjNoMlpWWldkVlZzVG1saVdHaE1WbFpTUjFNeVNsZFhhMXBYWW1zMVZGVnRkSGRXTVZKelYyeE9WazFXY0hoWmExcExWbXhhYzJOR1VsWk5WbFV4Vkd4YVIyUkZNVmhrUm1Sc1lrWndORll5ZEZkaE1rMTVWVzVTVkdKclNsTlpiRnAzVjJ4U1dHTjZSazVpUjNnd1ZHeFZOVlJzU1hkT1ZFWlhZbFJHTTFsVVJrWmxWbkJKVTJ4b1UxSllRbGhYYTFKQ1pVVTFjMWRzVmxKaGVteHpXV3hvVDAweFdraGxSM1JWVFd0d1YxUnNWbGRXVmxwR1YyczVWVll6VW5wVWJYaFRaRWRPUmxSdGJGZGlXR2hYVmxSSmVHUXhVbk5UYTFwVVlsUnNWbFpxVGtOVU1WSnpWbFJHYTFKc2NEQlphMXBIVm1zeGMxTnFXbGhXYkhCeVZrUktTMU5HVG5WV2JGWnBWMGRvVDFkWGVHRlRNa2w0WTBWYVZXSllRbkZVVldRMFVsWmFXRTFYUmxoaVJuQkhWV3hvYjFaWFNsbFJiR1JWVm14V05GWXdXbUZrUjA1R1QxWk9UbGRGU2pOV2FrWmhWVEZGZVZKdVRtbFNiV2haVm10V1MxVldXbkpXYTFwT1ZteEtlbGRyV25kVU1WcFZVbFJLVjFaNlJUQldSekZMVm14a2RWTnNWbWxTYTNCUVZrUkdhMVV4VGxkVWJrWlRZbFZhVjFSVVNsTmtWbFY1WkVad1QxSlVRalJaYTFwWFZsWmFSMWR0UmxwV00xSlhXbFZhYTFZeFZuSlRiWGhUVmtaYVIxWnNXbE5STVZKelUydGFWMWRJUWxaV2JGcExXVlp3V0dWSVpGTldiSEF3V1RCVk1XSkhTbFpOVkZaWFVqTlNjbFp0YzNoak1rNUdWbXhhVjFKVmNGRlhWbVIzVW0xUmVHRXpiRTlXYlZKd1ZXeG9iMUpXVmxkYVJFSllWakZhZVZSV1VtRlhSMHBaVVd0a1lWSkZSalJVYlhoSFpFZE9SazlXWkU1U00wNDBWbXBLTUZVeFNuSk5WbHBQVmxaYVdWWnJWbUZWUmxaeVZsUkdhazFXU25sWGExcDNWREZhZFZGdWFGcGhNbEYzVmtSS1YyTnNXbGxoUmxacFYwVktXRmRzV21GUk1XUlhWbTVXYVZJelVsaFVWbHBoVG14VmVGWnJPVlpOV0VKNldXdG9SMVV4WkVoVmJFSmFWak5vVEZrd1dsTlhWMDVHVGxkNFUxWkZWWGxXTVZKUFlURmtkRlp1U2s1U1JWcFpWbXBPUTFFeFVsVlNiazVZVW14S1ZsVnRlSGRXTURGSFZsaG9WMUp0YUROV1ZFcEhZMnM1VjFac1NtbFdNbWhvVjJ4a2VtUXdOVmRhU0ZKT1ZsZFNjVlJYYzNoT1ZscHpZVVZPVkdKRk5VcFdSekF4VmtkRmVXRkdVbHBoYTNCSVZqRmFVMWRXVm5OU2JXeFRVak5vTkZZeFdsZGhNVmw1VW01U1UxZEhhRkZXTUdoRFlVWmFjVkZVUW14U2JYUTFWRlphWVdGVk1VbFZiRnBhWld0d2NsVjZSazlTTVU1MVYyeHdWMkpYYUZCWGExWmhVVEpOZDA5V1drNVdiRXBZVm14U1YxTkdXbkphUkZKVlRWVndlbGRxVG05VmJVVjNZMFpvVm1KSFVuSlpiWGhYVWpGU2NsTnRhRTVXTWxFeFZtMTRiMkV4VW5SV2JrNVhWMGRTVmxsdE5VTmxWbEpXVmxSR1dGSnNTakJVVmxVMVZURktWVkZxVWxkU2JFcE1WVEl4VjJOck5WbFNiRXBwVmtWYWFGWnRkRmRrTWs1WFZXeGFWbUV3Tlc5VmJGSkhaVVphUjFWc1pGVk5hM0JZVmpJMVExWlZNSGxsUlU1YVZrVndWRlV3WkVkVFZrWjBZMGQ0VjFKVldqVldNVnBoWVdzeFdGUnJhRlpoTVVwb1ZGYzFVMWRzVWxoa1JtUk9UVlpLZWxaWGVIZFViRnBWVm14YVZtSlVSVEJXTWpGWFl6Rk9kVlZzYUZkbGExcElWMnRTUjJOdFZsZFRibEpPVmxSc1ZGVnFUbEpsYkZwRlVteE9WMDFyY0ZkVU1WcFhWbFphUmxOdGFGZGhNVm96V1dwR2EyTnNWbk5YYlhob1RUSm9SbFpXV210TlJtUllWbTVTVm1KVWJGWldNR2hEWld4c1YxWllhRmRXYkhBd1dWVlZNVlV4U2xkV2FrNVhVak5TVkZaWE1WSmtNREZYVm14d1RrMXNTbEZYVm1SNlRWZE9jMVZ1VG1GU1ZGWnpXVmh3Vmsxc1dYaFZhMDVhVm14d1NGa3dhRXRXVjBWNFUyeE9WVll6VVRCVmExcEhWMGRTUjJKSGVHaGxhMVY1Vm1wSmVHUXhTblJWV0dST1ZrWndVMWxzYUVOVlJscHhVVzVLVGxadFVubFdWM1JoVkd4YVZWWnJXbGROVmtwSVZrUkdTMUpyTlZsVWJGWm9UV3hLYUZaSGVHRmtNazVZVTJ0b2ExSlViSE5aVkVaWFRrWmFTRTFZWkZkaVZscFhXbFZXVTFWc1dYcFZiSEJWVmpOU2VsUnJXbE5XYkZaelkwVTFVMkpZYURSV2ExcHZaREZTYzFkcldrNVRTRUpXVm14a1UxUXhjRmhqZWxaWVVtczFXbGRyVlRWVWJVVjRZMGhvVjFJemFISlZha3BIVW1zNVYxWnNWbGRTVlhCb1YyeGplRTFGTUhoYVJtUmhVbFJXYzFsVVRsTldiR3cyVTIxMGFGSnNiRFJaYTJoaFZrZEZlV0ZHVWxwaGEzQklWakZhVTFkV1ZuTlNiV3hUWWtoQ1YxWnNaRFJYYXpWWFYydGtWR0pIVWxWWmEyUlRWa1phZEdSSVRtdE5WVFZYV1ZWb2QxbFZNVWxSYTNCWFZucEJNVmxWV210U2F6RlZVV3hhVTAweVRYaFdhMlEwVWpGYWMxVnNhR0ZTYTFwWFZGVldZV1ZXWkhKV2JYUnBUV3MxU1ZaSGNGZFViRVY2Vld4d1ZWWjZSbFJaZWtaM1VteGtWVlp0ZEZOaVdHaGFWbXRqZUZsV1pITlhXR2hVWW10d1lWUlhjRWRYUm5CWVRWVTVUMVp0T1RaVlYzaERZa1phVm1GNlJsWk5WbHAxV2tSR2RtVkhUa2xXYkdScFlrWndhRlpHVWtkVE1sRjRZa2hHVkZaRlNtaFVWM040VGxaYWRHTkZUbGhXVkVJelZHeG9UMWRyTVhGV2JXaGFZVEpTVUZsNlFUVldWazV6WTBab1UxZEZSWGxXV0hCRFZERlZlR05JU2s5WFJWcFhXV3hvVTFWV1ZuSmFTSEJPVm0xU2VsWlhNVEJoUmxwVlZteHNWMkpHU2t4V1JFWmFaREZhV1dGR1ZtbFNNVXBaVjFaYVlXUXhaRWRWYkZaVVlYcFdUMWxyVmxkT1ZscEhWV3QwVjJKV1dubFVWbWhUVlRKS1dHRkZPVmRoTVhCNldrUkdUMVp0UmtsalIwWk9VMFZLUzFac1kzZE9WMFpIV2tWYVRsWkZTbGRWYWs1cVRWWnNXRTFWWkZSU2JIQXdXVEJrYjFSc1draGtla3BYVFc1b2NsWkVRWGhYUmxKMVZXeGtWMlZ0ZUU1V2JYUnZWREpLYzFSdVNtaFNhelZ3VkZkMFlWZHNXa2RoUms1V1ZqQndSbGxyV2xkV2JVcEhZMFY0VjJGcldreFdha1pQWkVaa2MxcEhhRTVTYmtKV1ZtMTRiMk14Um5KUFZscHBVbFpLVjFsc1duZFZSbXhZWlVWMGFtSkdSak5XVnpWTFZERmFkVkZzV2xoaE1sSjZWa1JHV21WR1dsbGlSbFpwVWpGS1NGWkdXbFpOVm1SSFYyNVNhVkl3V2xoVVZWSkRUbFphUjFWcmRGWmhla1o1VkZWb2MxWXhaRWxSYXpsYVlrWmFhRmxxUmxOV01WWnpZMFU1VGxJemFFWldiR1IzVVRKR1IxTlliR3hTUm5CV1ZXMTRSbVZHWkhSbFJUbFhUVlZhZWxaWGRIZFZNVXBHVTI1V1ZrMXVVblpXVkVwS1pWWktjMkpHVmxoU2EzQlRWMWQwVTJNeVVsZGFTRTVvVW1zMWFGbHNWbUZYYkZaWVRWZEdXR0pHYkRSVk1qVkxWMnN4Y1ZKc2FHRldla1pRVkd4YWRtVnNSbk5SYlhoWFZsWndOVll5ZEZkaE1rbDVWR3RvVldGc1drOVZWRTVUVjJ4U1YxWlVSbE5OVm5CWldsVmtSMVV5U2tkWGJuQlZUVlphTTFac1pFWmxSMDVIVW14U1YxWnJXWHBXTW5CRFpERk9WMVp1VWxCV01taFpWV3hTUm1ReFdsWmFSRTVQVmpCd2Vsa3dXbk5XYlVwWFkwaEdWVll6YUdoVWJGcDNVMFV4VjFwSGVGZGlWMUV4VjFkMGIxWXhiRmhUYkZab1UwWndWVlJXV2t0T2JHUnhVMjFHVjFKcldqQlVWbVF3VmpKV2MxZHVhRmhoTVZweVdYcEtVMlJHVG5WUmJFcHBWbTVDYjFaR1pEUlhiVkY0V2tWV1ZGWkdXbk5aYTJSclRteFplVTFYT1doaVZWcFpWMnRvUzFkR1RrbFJibXhoVmxaVk1WVnNaRVpsYlU1SFkwZG9hVkpXV1RCV2FrWmhWVEZXY2sxWVRtcFNWMmhVVmpCa05GUXhjRmhrUlZwclRWWktXVmt3Vm1GVWJGcFZWbXhzVjFKNlJYZFdNakZIWTIxR05sRnNWbGRpUlhCTlYxWlNRbVZHWkVkVWJGWlVZWHBHVTFSVlZtRmxWbGwzWVVoa2FXRjZSbGhaTUZwWFdWWkplV1ZHUmxkaE1YQllWR3RhYTJOc1ZuUk9WVFZYVmtaYVYxWnJXbTloTVdSMFUyeGFWMkZzU2xaVVZXUlRWREZ3UlZGVVJsTldNRnBKV2tWa1IxVXhTWGxoU0ZwWFVteHdWRmt5TVZkV2F6RldZVVprYVZkSGFFNVdiRkpEVTJzd2VGUnNXbFZpUlRWb1dWaHdjMVpzVm5OVmJFNVdVbXh3UjFSc2FFTldWMFY0VTJ4b1dsWldWWGhWYkZwclpFZFNSMk5HWkZOV00yTjVWbXRhVjFVeFZuUldiRnBPVm14YVdGWnJWbUZaVmxKWVpVVjBhbEpzU2xsWk1HTXhZa1pLVlZKcVFsZFdiV2gyVmpJeFIyTXlTa2hPVmxwVFlYcFdSVmRzWTNoVk1VNVhWRzVHVW1KWGVFOVpiVEZ1WlZaa2NsVnJkRmROYkZwWFdrVldVMVp0U2xkalJrWlhZVEZhVjFSVldsSmxSbFp5VDFkb1YxWkdXa2RXYlRCNFlqRlJlRk5yWkdwVFJYQlpWbTE0UzFNeGNGaGpNMmhUVm14YVdsbHJWVEZXTVVwelZtcFNWMDFXU2t4V1ZFcEhWbXN4V1ZKdFJrNU5iV2hRVjFkNFlWSXdOVWRhUm1ocVVtNUNjVlZzVW5KTlZsWllUbGhrYUUxRVJqQmFSRTVyVjBaYVJtTklWbHBoYTBvelZXcEJOVkpXVm5KUFZtUk9WbXhaTWxacVJtdGtNazV5VFZaYVRsWnRhRmRXYTFwTFZVWmFjbGRzWkU5aVJrcFhWMnRXTUdGR1NsVlNiRnBhVmxkU00xWkhlRXRTTVVwVlVXeG9hRTFzU2xSV1IzUmhZekZhVjFOc1ZsZGhlbFp2V1ZSQ2QyVnNXWGxsUlRscVlrYzVOVlp0Y0ZkVmJVcFpVVzFHVjAxR1ZYaFpla1pQVm14U2RHUkhiRmROUkZWM1ZtMHdlRTVHWkhSVGJrcFBWMFZ3VlZsdE1UUlJNVkowWkVoT1ZGSnNTakJaVldSM1ZHMUtSMWR1VmxaTmJrSkxWRlprUzFOR1ZuSmhSbEpwWW10S2IxWldVa3RVTWtwelZWaHNhVkpWTlc5WmEyUTBWMnhhU0UxVVVsUmlSVlkxVmxkd1lWZHRSbkppZWtKYVZsZFNVRnBGWkV0VFYwNUdaRWQ0VjFaV1ZqVldWRVpYWVRGUmVWSnJhRlZYUjNoWVZtcEtVMVJHVWxWUlZFSnNVbTE0TUZSVlVsZGlSMFY2VVZSR1ZsWnNTbWhWTW5oS1pEQTFXRTlXY0d4aE0wSllWakp3UTJSdFZsZFdibEpvVWpOQ2NGbHNXa3ROTVdSWVRWaE9hR0pIT1ROVU1XaERWVzFLZFZGdVNsVldla1Y2V2tSR2ExWldUblJPVjJ4T1UwVktTVlpFUWxOV01WSnpWMnRvV21WcldsWldhMVozVXpGU1ZsWlVSbGhTYTNCV1ZWZHpOV0ZXV25KalNGcFhVbTFTTTFaSE1WSmtNRFZXVm14U1dGSXlhRkZXYlhSaFdWZE9WMXBJU21GU1dFSnpWbXhTYzFKc1ZuTmhTRTVhVm10d1IxWXlOVU5XVjBwWVpVaHNXR0ZyY0ZoVWJGcEhaRWRPUjJOR2FGTldSbG8yVmxSR1YxUXlSWGxTYmxKVVYwZDRVRlp1Y0VkVVJuQlhWbXRhVG1KRk5WZFdSM2hQV1ZkR05tSkZXbGRTYkVwUVYxWmFZVkpzV2xsaVJsWk9VbXR3ZUZkclVrSmxSMUpIVTJ4V1ZXSklRbk5aYTFaWFRteGFSVkZzVG1oaGVrWlhWR3RvYzFadFNsVlNiVVpWVmpOb1RGbHFSbE5qTVZaeVRsVTFUbEpGV2xkV2JYaHZZekZzV0ZKdVNtbFNlbFpYVlcxek1WRXhiSFJrUkU1c1lrWktNRmxyWkc5V01sWnpVMWhzV0Zac2NISlhWbVJIWkVaT1dXSkZPVmRsYTFwMlZtMXdTMVF5VWxkVldIQnBVbFUxYjFacVFURk5SbHAwVFZjNWFGSXhXakZXUnpBeFYwWmFSbU5GYUdGV00yZ3pWbXRhUjFkRk5WaGlSbVJPVW01Q05GWlVTVEZqTVVaeVRsaEthVkpXU2xkWmJGcDNWVlpXY2xaWVpHeGlSMUo2VmxkMFlWUnRSalppUlZwWVZrVTFjbFpITVV0V2JGcFpZMFpvV0ZORlNsUldSbEpDVGxaS1YySkVXbE5oZW14UFdXdFdkMDFHV1hoVmEzUldUV3RhUjFSc1dsZFdWbHBHVGxVNVYyRXhjRmhVYkZwclpFZE9SbU5IUms1V1ZYQldWbFphYWsxV2JGZGFSV1JVWW14d1dWbHJaRzlUTVd4MFkzcFdUMVpyV2pCWmEyUjNZVlphYzJOSVdsaFdiV2d6V2xkNGRtVkhSWHBpUms1cFltdEtiMVpzVWtOU01sSlhZa1prYUZKVmNIQlpWRW8wVW14c2NWTnRkRlJOVlhCNFYyNXdRMVpXWkVsUmJrcGFZVEZXTkZac1dtdFdWbFp5VDFkNGFFMUdhM2hXYWtaaFZUSkZlVkp1U2s5V1ZscGhXbGQ0UzFWR2NGaGxSbHBzWWtkU2VWZHJaRWRoUjBwSlVXdHNWbUpHU2toV1J6RlhaRVpTY1ZWc1ZtbFNhM0JOVjFkNFZtVkhUa2RTYkZacFVsaENVMVJYZUV0Tk1XUllUVWhvVjAxRVJrZFphMVpUVjIxV2RGVnJkRlpoYTBvelZHeGFhMk14Y0VaYVIzQm9aVzF6ZUZaV1pIZGpNVTV6VTFoa2FsSkdXbGxaYTJSVFUwWnJlV042Vms5V2Exb3dXVEJhZDFkR1NsVldibkJXVFZaYVVGbFVTazVsVmtwellVVTVWMUpXY0hwV1ZsSkxWREpLYzFWWWJHbFNWVFZ6V1d4YVIwNVdiSEpWYTA1WVlYcEdNRmRyYUdGV1IwVjRZWHBDVldKR1ZqUldiRnAzVG14YWNrNVZOV2hOYmxGNlZtdGtOR0V4U25KTlZWcFBWMFpLVjFsc1pHOVVNV3hZWXpOb1RrMVdTbmxXVjNSM1lrWktWVlpzV2xkaVZFWXpWMVphU21ReVNrVldiRlpPVW10d1NGZHNXbUZrTVVwWFUyNVNhVkpVYkc5V2FrNVRaRlprYzJGSVRsSk5hMXA2V1d0YWMxWlhTbGxoUlhSV1ZrVndWRmt4V25OalZrNVZVbTFzVjFkRlJYaFdWbHBUV1ZaT2MxSllhRlJpVkVaV1ZGVmFTMVF4VWxWU2JtUlhWbXR3VmxVeWVFTlZNVWwzVGtod1YxSnRUalJWYlhOM1pVZEtSVmRzV2xkU1ZGWlNWbGQwYTFSdFZrZFZia1pVWWtVMWNGWnRNVEJPVmxwWVRWYzVWVTFXY0VkVVZXaDNWbFphYzFOc1pHRldiSEF6V1RGYVQxZEdjRWRTYkZwT1VsWnZlRlpyVmxOVU1WRjVVbXhvVTJKSGFGQlZNRnAzWWpGYWNWSnVaR3BXYlhoNFZURlNSMkZXV1hkWGJHeFlWa1ZyZUZaVlpGZFdiRTUxVVd4d1RtRnJXbGxYVmxaclVqQTFkRlJZYkdGU2JrSlBXVlJHZGsxc1dYbGxSVGxTWWxWd01GVXllRzlWTWtwWlVXdDRZVlpzV2tkVVYzaFBWbXhTYzFSdFJtaGxiWGhIVm10YVUxUXhiRmRYYTFwWFYwZDRWbFJWV2t0alZuQkZVVmhvYTFKcmNGWldSM2gzWWtkS1JsWnFXbGRTUlVwVVdWZHplRlpyTlVsaVJscHBWa1ZhYUZaR1pEUlRNa2w0Vlc1T1ZtRjZWazlVVlZKSFZteGFjMkZJVGxwV01GcDVXV3RqTVZac1NuSk9WVTVhWWxob1VGVnFSbmRUUjBaSVVteE9UbFpYT0hoV1ZFa3haREpXYzJJemFHbFRSbHBWV1d4b2IxbFdXbkZVYXpWT1RWVTFWMWRyVlRWaFJrbDNUVlJXVjJKSFVuSlZla0Y0WkVkV1JWUnNVbWxpV0doRVZrY3hNR014U2tkV2JsSllZa1ZLVkZWc1VrTk9iRmw1WlVaT1UyRjZSbmxVTVZaWFYyc3dlVlZyT1ZwaVJscFhXbGQ0YTFkWFRrZFRhelZPVWtkNFIxWXhhSGRTTVZGM1RWaE9WR0pzU2xsV2ExWjNWa1pzVmxaVVJsZFdiRXBXVmtkek1WWXhTbk5YVkVaWFRXcEdNMVV5ZUhabFJrWnpWV3hLVjJWc1duWldiVFYzVmpKTmVHTkZXbFZoTURWdlZXMDFRMU5XV2xoT1dFNVdVakJhV1ZaR1VrOVdSbHBZVld0NFlWWnNjRE5XTUZwTFpGWk9jMUZ0ZUZkV1YzTjRWbFJHVjJFeFRYbFdiR1JxVW0xb1ZGbHRkSGRWVm5CWFZtdHdUMVpyTlZkWlZWWXdZVlpKZUZOcmNGZGlWRlo2V1Zaa1IxWnNTblZUYkdoVVUwVktNVmRzWkhwTlIxWlhWMnhzYUZKVWJHOVpiR1JQVG14YVIxWnNUbFJOYTFwSFZHdG9jMVpXV2taVGJFSmhWbnBHY1ZwWGVGTmpNVlowWkVkb1RsZEZTWGRXYTJONFRVWmtjMWRyWkZkaGJIQldXVzAxUTFJeFVsZFdXR2hyVW0xU1dsbHJXa05pUmxwV1lYcEdWazFXV25KWFZsVjRWMFpPZFZWc1ZtaGhNSEIyVm0wMWQyTXdNVmRVYkZwWVZrWmFjRmxyYUVOWGJGcFlUVmRHV0dGNlJuaFphMUpIVjBkS1ZWSnVjRnBpV0ZGM1ZXdGtSbVZXY0VobFIzaFhWbFp3TlZZeWRGZGhNa2w1Vkd0b1ZXRnNXazlWVkU1VFYyeFNXR042Um10aVIxSjZWMnRWTldGdFNraGFSRnBYVW5wRk1GWXljM2RsUm1SeFZteG9hVkpVVmpGWFZFSldUbFUxVjFKdVZsSmlWVnB2Vm1wS2IwMHhaRmhOU0docVRWaENlbGxxVG5OV01rWnlVMnN4VmxaRmNGUlViWGhyVmpGd1NGSnRiRk5pVjFFeFZrWmFiMWxXYkZkVFdHaFhZbXhhVlZSV1ZURmxWbVJ4VTJ4a1QxWnJXakZaYTJSSFYwWktjbUpFVWxoV1JXd3pWRlZhZG1ReVNYcGhSbFpvVFVoQ1ZWZFdVa2RaVjBwWFYydGtWMVpHV2xSV2JYUjNWbFprV1dOSGRGUmlSVFZHVlZjd01WWkhSWGhoZWtKVllURlZlRll3V21GV1ZsSnpZMGRvYVZkRk5EQldhMXBoWVRGV2NrNVZXazlXYkZwWVZqQm9RMVF4Vm5GUmJtUnBUVlpLV0ZaWE1EVmhSMFkyVW10YVYxWnNTbFJYVmxwS1pVWktWVkZzYUZkaVJYQklWa2Q0Vm1WSFRsZFNibEpzVWpCYVYxUlZWbFpOVmxWNFZtMDVWVTFFUmtsV1J6VlhWbTFLYzJOSVFsWmlia0o1V2xkNGEyTXlSa1pqUjJ4T1ZteHdTRmRXVm1GU01XUldUVlZXYVZKc1dsVlVWbHBMVG14a2NWTnJaRmhTYlZKWlZERmtkMVJyTVZkalNHUllWMGhDVUZaVVNsZFdiVkpHVld4YWFWWnVRbEpXVjNSaFdWZE5lRlZ1UmxSaE0wSlFWbXhTVjFac1ZuUk5WRUpXVW10d1NGWnNhRzlXVm1SSlVXdFNXbFpzY0hwV2JGcExWbFpXYzJOSGVHaE5SbGw2Vm10U1EyRXhWWGxTV0dSUVZsZG9WRll3Wkc5VlZscHlWbTVPVGsxWFVucFhhMXBoWVdzeFNHVkZXbFpXYldoUVZUSjRTMUpyTVZsYVJscFRZa1ZaZWxkWE1IaFZiVlpZVTJ0c1YyRXpVbk5XYWs1VFpGWmtjMkZJVGxKTlZWcFlXVEJhYzJGR1NYcGhSMFpoVm0xU2NscEdXbk5XTWtaR1ZHMW9hVlpYZHpGV1IzaHFaVWRHUjFkWWJGVmhhM0JaVm0weFVrMUdiRFpSYm1SUFZqRkdOVmRyVmpCVk1rWjBaVVJDVjFKRlduSldiVEZYVm1zMVdWSnRSbXhoTTBKUVZtMXdRMk50VmtkYVJtUmhVbFp3VUZWdE1UTk5iRlY0WVVkMFZVMXNXbmxVYkdoSFZsZEtSMU51VmxWV1JVVjRWV3hhVjFaV1RuSlBWMnhYWVRGcmVWWnJaREJoTVVwMFZtdGthVkpHV205YVZ6RlRVekZXY1ZOcVVtdFNhekV6VjJ0Vk5XRXlTbGRUYkd4VllrWktSRlpGV2tabFJrNTBUVlpvYVZkRlNqWlhWM1JXWlVkT1YxcEdWbFpoZW14dldWUkdkMlF4V2tobFIzUlRUV3RhUjFReFZtOVdWbVJJWlVVNVZtRXlVbEJVYlhoclYxZE9SMWRyT1ZOV1JsVjVWbXhhVTFFeFVYbFNiazVxVTBWd1ZsWXdhRU5XUm14V1ZsaG9XRkpzU2xwVlYzUjNWVEZLUmxKVVJsWk5WbHBVVlZjeFQxSnRTa1ppUmxKcFYwZG9lVlpVUW1GWlZUVlhZa2hTYVZKVmNIQlphMVozVjBaVmVXVkZPVmRXVkVaWFdUQmplRll4U2taWGExSldZbGhvVkZrd1duTk9iSEJHWTBaS1RsWllRakJXYTJRMFZURmFjazFZVG1wU2JXaFVXV3hvVTFsV2NGaGxTRXBzVm14S2VGVXlNVWRoUjBwSlVXdHNWMVp0YUhKV1JFcExWakpPU1ZSc2FGaFRSVXA1VjFaa2VrNVdXbGRTYkd4b1VqQmFjRlpzV2xkTk1WcElUbGhrV0dGNlJsZFVWbFp2VjBaWmVWVnNTbGRXUlVwTVdrUkdjMk15UmtaVWJYQk9ZVEozTVZac1kzaE9SbEpIVWxob1ZGZEhVbUZXYkdSVFpXeHdXR1JFVWxkV1ZGWlpWako0VjFVeFdYcGhSa1pYVmpOb1dGVjZSbFpsUms1elYyeE9hRTB5YUU5V1ZsSkRVakpPYzFwRlZsUmlTRUpRVm0wMVExWnNWWGhWYTNSV1VtdHdTRmxyVWxOWFJsbDZVV3hvV2xaV2NIcFdiR1JIVTBkT1JrNVhhR2hOUmxreVZtdGFVMU14VW5KTlZscFFWbFphWVZwWGRFdFZSbFp5VjI1S2JGWnRVbmxXVjNNeFZHeEtkR1ZHV2xaaVZFWXpWa1ZhWVZOV1VuUk9WMFpwVWxSV1JWZFhkR3RUTVU1WFZXNVNiRkpZUWxWVk1GVXhaRlpWZVdSR2NFOVNNVnA1Vkd4b1IxVXhaRWhsUmtKWFlXdEtWMXBYZUZOV2JIQkdaRWRzVjJKclNscFdWM2hUVmpGc1YxZFlhRk5YUjNoV1ZGVmtVMUl4Y0ZaV1ZFWlhWbXR3V2xsclpFZFZNVXBYWTBoYVYxSXpRa3hXVnpGWFZqSktTVkpzY0U1TmJXaHZWbFpTUTFKck5WZFViRnBWWWtVMVQxVnFRbUZUVm14eVlVaGtWVlpzY0VaV2JUQjRWMGRHY21OR2FGVldWbkIxV2xaVk5WZFhUa2RpUlRWT1YwVktNbFl4VWt0ak1rcDBVMjVPYUUweWVGRldNRnBoWVVac1YxcEZPV3hpUlRWWFZrZDRUMWxYUmpaaVJWcFhZbFJGTUZaRVFYaGpiVVkyVW14V2FWSnJjRWxYVmxKQ1RsWktWMWRzVmxOaGVsWnpXVlJDZDJReFdYaFhiRTVUWVhwV1NGbHJVbUZWYkZwR1UyeEdWbUZyV2t4Wk1uaFNaREZ3UmxkdGVGTldSM2hYVmxSR2IyRXhiRmRYV0doWFltMVNWbFJVU2pSUk1XeFZVbTA1VDJKR2NGWlZiWE0xWVVkS1NHUjZSbGROYmxKVVZWUktSbVZIU2tsU2JGcFhVbXR3VWxadGRHRlNiVlpYVld4a1ZtRXpRazlXYkZKelZteGFSMkZJVGxWaVJtdzBWVEkxUTFkR1duTlRiRkphWVRGV05GVnNXbE5rUjA1SFkwZDRhVll5WjNkV1ZFWlhWVzFSZUdJemFGTmhNbmhUV1cxNGQyTldWbkZTYlVaT1Ztc3hNMVpIZUU5WlYwWTJVbFJLVjAxWGFIWldSekZIWXpGa2RFOVdWbWxpYTBwRlYxWmFZV1F5VWtkWGJsSm9VbXRLV0ZSV1duZGxWbHBJVFZoa2FVMXJXa2RVVmxwWFZqRmtTR0ZGT1ZwaVJuQklWR3RhYTFZeFZuUmtSMmhPVWtWWmQxWlVSbE5VTVZKelYxaG9VMkp1UWxWV2JGVXhWRVp3VjFkdVRtcFNhelZhVlZkNFEySkdXbFpqUkU1WFRXcEdlbFZYTVVwa01rcEhWV3hhYVZadVFsRldiWFJoVm0xV1YxVnVVbXBTV0ZKdlZGVlNSMU5XV2xoTldFNVZUVlZ3U1ZkWWNFZFdWMFY0VTIxR1lWWldWalJaTVZwaFZsWmFjazVYZUdoTmJtTjNWbXBLTUdFeFRYbFNhMXBQVmxkb1dGWXdaRk5VTVZKWVkzcEdhbFpzUmpOWGExcDNZV3hLV0dWRmNGWk5ha1V3V1ZSR1QxSXhaSEZXYkhCcFZqTm9SRmRYTVRSVE1WbDRWRzVPVldKR1drOVdiR2hEWkVaYWNsVnJaRkpOVlhCNlZsYzFRMWR0Vm5SVmEzUldWa1ZhVEZsc1dsTmpNVlp6VjJzMWFWTkZTbHBXVnpCNFRVWmtkRlp1VG1oTk1uaFdXVmQwZDJGR2JGaGxTR1JVVW14YVdsZHJWVFZoVmxwMVVXNXdWMDFYYUROWlZFcEhZMnM1VjFac1NsaFNNbWh2VjFkNFYxWnRVWGhWYmxacVVtNUNUMVpzVWtkVFZsbDRXa2QwVmxac1ZqTlZNblJMVjBkS1ZWWnJlRnBoTVhCNlZqQmFWMWRGT1Zaa1JrNW9ZbGRSTUZaclpEUlZNV1J5VFZoS1RsZEdTbGRXTUdSVFlVWldjVkZ1U210TlZrWXpWbGMxUzFSc1NsVldibWhXWWtkb2VsWkVSbUZUUjFKRlYyeFdWMDB3U2tsWFZsSkhZekpTUjFOc1ZsSmlWVnBZVld4V1drMXNXWGhWYTNSVllYcFdTRmt3YUVOaE1ERjBWV3hDVm1FeFdrZFVWbHBUWkVkS1NWTnJPVTVTTTJoSVZsWmpNV0V4WkhKTldGWm9Va1Z3WVZwWGRIZFdNV3h4VVc1a1UwMUViRVpWYlhNMVZqRktkR1JFVmxkU2JVNDBWbGN4VW1WSFRrWmhSbEpYVWxWd1VsWlhkR3RsYlZGNFZXNVNhbEpXY0hOV2JGSlhWbXhzVlZSdVpGVmlWVnA1VmpJMVMxZEdXalpTYTJSVlZsWndNMVpzV2tkWFYwNUhZMFUxYUdWclJqTldha2w0WXpKT2NrNUlaR2xTVjNoUFZXcEtVMk5XYkhOWGJIQnJUVmhDU0ZsVlZqQmhNVnBZWlVWV1YxWjZSbWhXUkVaaFVqRmFXV0pHYUdsU01VcEpWMVpTUjJNd05YTmFSbFpVWVhwc1QxbHJhRU5sUmxsNVpFZDBWbUpXUmpOVWJHaFRWMGRLV1dGSFJtRldla1pVV1RGYVVtVkdWbkpUYlhoVFltdEpkMVpYZUZOUk1WRjVWbTVPYUUweWFGWldiR1JUV1ZaU2NWRnVUbFJXVkVaSlYydGtSMkZYU2tkaU0yaFhUVlpLVUZaVVNrOVRSazVaWWtVNVUwMXNTbUZXUm1ONFZUSk5lR05GV2xoV1JscHhWV3BCTVZOR1VYaGFSemxhVm10c05GVXljRmRYUjBwSVlVWkNZVll6VVhkVmEyUkdaVlp3U0dWSGVGZFdWbkExVm1wQ1UxTXhVWGxTYmtwT1YwWktWVlpyVm1GVU1XeFlaRWhLYkZKdFVqQlpNR00xWVZaYWRHUjZTbFppVkVZelYxWmtTMVl5U2tWVWJGWnBVbXR3UlZkV1dtRmpiVlpYVjJ4c2FGSlVWbTlaVkVaWFRteGFTR1JHVGxSaGVrWkhWR3hXVjFkSFNsVlNhM1JXWVRGS1JGbHRlR3RXTWtaR1pFZDRWMkpZYUdGWFZsSktUbFpTUjFkcmJGVmlWRlpWV1ZSR2NrMUdVbGRXVkVaWFZtMVNNRnBWV25kV01ERldZMGhvVjFKNlJqTldNbk4zWlVkT1NWVnNWbWxYUmtwdlZsZDBWMUp0VmxkYVNGSk9WbTFTYjFsWWNGTk9WbHBIVld4a1ZXSkZjRWRXTWpWVFYwWmFjMU5zVGxWV1JVVjRXVEZhWVZkV2NFaFNiV2hYVmxaVmVGWlVSbGRVTVZWM1RWVm9VMkV5YUhCVk1HaERWR3hhY2xWc1pHbFdiVko0VlRKNGExUnNTblJhUkZaWFVucFdhRmxXWkV0V01rNUpXa1pvYVdKWWFERlhWRUpXVGxVMVYxSnVWbEppVlZwdlZtcEtVMlZXV1hkaFNHUlhZWHBHVjFSc2FGTldNa3BZWVVkb1ZtRnJSak5hVmxwVFpFZE9TR1JIYkZkaVdGRXhWbXhqZUUxR1VuTlRhMlJxVTBaS1dWbHJaRk5VTVZKVlVtNU9UMkpWVmpaWGExVXhWakF4V1ZGdVdsZFNNMUpVV1ZkemVHTnJOVmRXYkVwcFZrVmFURlpXVWtOV2F6VlhWR3hhVldKWVVsaFZiWFJoVmpGWmVXUkhSbGhXVkVaR1ZXMTRSMVp0UlhoWGJHUmFZbGhTZWxWcldtdFhSVEZXWTBaS1RsWllRakJXYTJRMFZURmFjazFZVG1wU2JXaFVXV3hvVTFsV2NGaGxTRXBzVm14S2VGVXlNVWRoUjBwSlVXdHNWMVp0YUhKV1JFcExWakpPU1ZSc2FGaFRSVXA1VjFaa2VrNVdXbGRTYkd4b1VqQmFjRlpzV2xkTk1WcElUbGhrV0dGNlJsZFVWbFp2VjBaWmVWVnJkRmRoTVVwRVdXMTRUMk5XUm5OYVJscE9WbXh3TlZaRVJtRlVNV1JXVFZWV2FWSnJjRmRaYTFwV1pERnNkR1JFUWxkU2ExcDRWMnRXZDFWck1WWmpTRkpYVWtWS1ZGWnFTa3RTYXpWSllrWlNWMUpzY0ZGV2JYUlhXVmRPYzFWWVpGWmlSbkJQVm14U1JrMXNWbGhOV0U1WVlrWndSMVpzVWtOWFJtUkpVV3RPVlZaV1ZURlZNRnBYWkVkU1IxRnNUazVTYkd0M1ZtdFNSMVV4VG5SVldHaHFVbTFvV0ZacVNsTlZiRnBWVVd0MFQySklRa2RaVlZZd1ZHeEpkMkpFVm1GV1YyaG9XVlJCZUdNeFpIRldiRkpPVW01Q1JWWlVSbUZXTVVsM1QxWmtVbUpHY0hOV2FrNU9aV3hWZUZadGRHcE5hM0JYV2tWV2MxWlhSbkpYYlVaYVlsaE5kMXBFUm5KbFYwcElUbGRvVGxZeVkzbFdNalYzVWpGc1YxZHJhRlppYTBwV1ZGWmFTMVl4Y0ZaWGJtUlRWbTVCTWxWdGN6VldNVXBWVWxod1YwMVhUalJWYlRGWFVtczVWbUZHVmxoU01VcFJWbGQwYTJJeVRuTmFTRXBXWWxSc2IxVnNVa2RXYkd4VlZHNU9WV0pGYkRSV01qVlBWbFpLVms1VlRtRlNSVWt3Vld0YVIxZFhUa1psUm1SVFVsVlZlRlpVU25kVU1rVjVWR3RvVkdKclNtRlVWRUpMVXpGVmQyRkZPV2xpU0VKNlZrZDBUMkZXU1hkalJYQlhVbnBGTUZVeWVFOVRWbEowVGxaU2FFMVhjM2hYVjNoV1RsWmtSMWRzYkdsU1ZHeHZXV3hrVDA1V1drZFhiWFJVWVhwR1dGbHJXbTlWTVZwSFUyMUdZVll6VW5wVVZFWlRaRmRPUms5WGFHaGxiRnBYVmpJMWQxUXhVWGhUYTJSVFYwZDRWbGxzVWtkVk1YQllZM3BHVkZKcmNGcFpWVnAzWWtaYVZsWlVSbFpOVmxweVZtcEJNVk5HVW5KaFIzaFVVbTVDYjFaWGNFZFdNbEp6Vkc1S2FGSnJOWEJVVjNSaFYyeGFSMkZHVGxaV01IQkdXV3RWTVZack1WZFdXR2hXWWxob1NGbDZSazlqYkdSelUyeGtXRkpVVlRKV1ZFWlhWREZWZUdOSVNrOVdiRnBZVm10V2QyRkdXbkZSYlVacVlrZFNXbGt3V25kVWJVWTJWV3BXVjAxcVJqTlhWbHBLWlVaS2NWUnNWbWxXUlZwdlYxZDBZV013TlhOalJXaHFVbXRLV0ZWc1ZscE5SbGw1VFVob1UyRjZSa2RVYkZKaFYwWmFSbGRyT1ZaaGExcDZXa1JHVW1WdFNrWlRiV2hPVmpKamVWWlVSbTlpTVZGNVZtNVNhRk5GTlZsV2ExWjNVekZ3V0dWSVpGZFdhMW93V2xWYVExVXhTWGROU0doWFRWZG9NMVV5Y3pGV2F6RlpVbTFvYkdKRmNGRlhWbVF3WXpBMVYxcEdWbFJoZWxaeVZGWmtORlpzVmxoTlZGSlZUVlp3UjFsWWNFZFdSbHBYVW1wT1dHRnJTak5WTVZwWFpFVTVXR0ZHYUZOV1JWWXpWbXhXYTAwd05WaFRiazVxVW0xNFYxbHNXbmRqUmxKVlVWUkdhVlp1UWtsVVZsWnJZa1phV1ZWclZsaGhNbWhFV1ZkNFJtVldVblZqUmxKWFZsUldWVll5TVhwT1ZrcFhWMjVTYkZKVWJFOVpWRXA2WlVaYVNHVkdUbE5OYTFZelZERldWMVl4V2taWGF6bGhWak5TVEZrd1dtdFdNVlp5VjJzNVUySllZM2xXVmxwVFVURldSMU5ZYUZSaWEzQldWRlZrVTFJeGNGWldWRlpYVm1zMVdsZHJaRWRXTURGWFYycE9WMUpGTlhwVlZ6RkdaVVp2ZW1KR1ZsZFNXRUpRVmtaa01HTnJNVWRhU0U1aFVsaFNjRlpzVWtkV2JGWnpWV3QwVlUxcldubFZiWEJYVmxVeFdGVnNhRnBpUmxWNFZUQmFWMVpXVm5SU2JFNU9WbFpyZDFacldtRlZNVTE1VWxoa1RsWkdjRzlhVjNSM1lVWldjbFpyV214U2F6VlhWbFpvYTFsVk1VaGxTR1JhVmxkU1VGWXhXa3BsUms1VlZXeGtUazB3U2toWGExWldUbFpaZDAxV2FGVmlSM2hVVkZaV2NrMUdXa2RYYlVaUFVtMTBORmt3Vm10aVJrbDNUbGRvVmsxSGFISlViRnBhWlcxT1JsTnRkRk5XUmxwSlZrWmFhMVF4WkZkVFdHaFVWa1pLVmxacVRrTlhSbVJZWXpOb1UxSlVSa1pWYlhoelZtc3hkVlZ1WkZkU1JUVjZWVlJLUzFkR1RsbGpSbEpwVjBkb2FGWnRjRUpOVjFKelZHeGFWV0pVVm05VVZtUnJUbFpaZUZWc1pGcFdiSEJIV1ZST2MxWlZNVWRUYlVaaFZsWndlbGt4V21Ga1IwWkhZMFprVTAxdGFEUldhMXByWkRGR2NrMUlaRTVUUjNoV1ZtdFdZVlZXVm5KYVJUVnJUVlpLZVZaWGVIZFViVXBKVVd0YVYxSnNTa1JXTW5oaFVteGtkVkpzVWxkV01VcEpWMnhrTUdNeFNrZFdibEpZWVhwV1ZGUldWbmROUmxwSVRVaG9VMDFyVmpSWk1GWlhXVlpKZVdWR1FsVldNMUo2VkcxNFUxWnNjRVpPVjNST1ZqTm9WMVpzWTNoTlJsSnpVMnRhVjFkSFVsWlVWbHBMVjBac2MxWllhRk5XYkZvd1dUQmFkMVl3TVZaalNGcFhUVlp3Y2xaWGN6VldNVVoxVVd4YWFWWnVRbEJXYlhSaFVqQTFWMVZ1VWs1V2F6VndWVzAxUTJWR1duTlZhemxhVm10d1Ixa3dhRXRXVjBwSFUydGtWVlpzY0hwYVJWcFhaRWRTUjFGc1RsTmlhMG8wVm1wR2FtVkdUWGxUYTFwT1YwVmFWMVpyVm1GVlZscHhVVzVrYWxadFVsbFVWbHAzWVd4S1dHVkZjRnBsYTNCeVdWVmFXbVZIU2tsWGJGSlhZbGRvUlZkc1dtRmtNV1JIWTBWb1dHSlhlRmhVVlZwelRURlplRlZyZEdsaVZXd3pXV3RvUTFWR1dYaFhhM2hXWWxoQ2Vsa3hXbE5rUjA1R1QxZG9WMVpIZUVwV2JUQjRZekZzV0ZKdVNsZGhiRXBXV1d4b1ExbFdjRVZSV0docVZqQndTVnBWWkVkaFIwcEdZMGhzVjFKRlNuSldWRXBHWkRBeFYxWnNUbGhTTTJodlZsZDBWbVF3TVZkVmJsSk9WbXR3Y2xSVlVsZFhSbkJXV2tVNVZWWXdXbGhWTWpCNFYwWmtTVkZ0Um1GV00yaDZXVEZrUjFOSFZrZGpSMnhYWWxoamQxWnJXbUZWTVdSeVRWaEtUbFpXV2xWV2ExcGhZVVphY1ZKdVNtdE5WMUo1Vmxjd05XRkZNVmxSYTFwV1lrZG9kbFpITVV0V01VcHhWMnhXVGxacmNHOVhWbEpDWlVaS1YxZHVVbFZpUjNoVFdsZDRTMlZXV1hkVmEzUlZZWHBHZVZSVmFITldSbHBIVTIxb1YyRnJTak5hUlZwVFZqRldjbGRyTldobGJGbzBWbFphYjJNeFZrZFhXR2hZWW14S1ZsbFVTbE5WTVZKeVYyNWtWRkpzV2xwWlZWVXhWakZLV1ZGdWJGZFNiV2d6V1RKemVHTXlUa1pXYkVwWFVsWndZVlpYTURGaE1ERlhWRzVLV0ZaR1dtOVpXSEJYWlVaYVNFMVlUbFpTYTJ3MFZqSTFRMWRIU2xsUmEyUmhWbFpWZUZreFdtdFhWbkJHVGxkb2FWZEhhRFpXYWtsNFpERlZlVkpZWkZCV1YyaFhXV3hvVTFReFduSldiR1JQVm0xU2VWWlhjekZVTVZwVlZtcENWMVp0YUhKV1JFWldaVVpLY1ZOc1VsZE5ibVEyVmpKd1EyUXhTWGRQVld4b1VsUnNWRlZzWkRCT1ZsbDVaRWQwVjAxcmNGZFViRnBYV1ZaSmVsVnJPVnBpUm5CSFdsVmFVMVl4Vm5OYVIyaFhZbXRLU2xac1dsTlZNVkY1VTJ4YVQxZEZTbGxXYm5CSFZqRndWMVpVUmxOV2JIQldWbTE0ZDJGV1dsVldibVJYVFdwR2Vsa3llSFprTWs1SlVXeG9WMDFzU25oV1JsSkhVekExVjJFelpGcGxiRnB6V1ZST1UxSldXbGhOVjBaVllrWndTRlZ0Y0ZkV1YwcFZVbXhTV21FeGNETlpNVnBoVmxaU2RGSnNUbE5YUlVvMVZtdGtORlV4U25KTlZtUnBVMFpLVjFsc2FGTlZWbFp5VjI1a2FsWnRVbGxVVmxZd1lWWktWVkp1YUZkV2JFcElWbFZhV21ReVRrbFNiR2hYWld0YWFGZFljRU5qTVVwSFZtNVNXR0Y2Vm05WlZFWlhUbXhhUlZGdGRGZE5hMXA2V1d0b1IxWlhTbGxoUlRsV1lXdGFWMVJWV2xOa1YwNUpWRzFvYUdWcldqUlhWbEpQWXpGV1IxZHJhRnBOTW5oV1ZtcE9RMVJHYkZobFNFNVBZa1ZhTUZsVlZURlZNREZYVm1wU1YxSnRVak5aTWpGUFVtMVNSMVZzU21oaVZrcE1WbFpTUjFNeVNsZGFSbWhxVW01Q2MxVnNVa2RXYkZaWVRWaE9XR0pXV2pCWFZFNXZWMGRGZVZWdFJtRldiSEF6VlRCYVQyUkhUa2hTYkU1VFltdEtOVlpxUmxOVE1WcHlUVWhrVDFac1dsVlpiR2hEV1ZaYWNWSnNXazVXYkVwNVYydGFTMVJyTVZsUmExcFlZV3R3Y2xaV1dsWmtNVTV4VjIxR1UySldTazFYYkdONFZURk9WMVJzYUZCV1dGSlVXVmN4YmsxR1draGtSazVVWVhwR2Vsa3dWbTlXTWtwVlVteENWMkV5VWxSWk1uaFRWMFV4VjFOck5WZFdSVnBYVm0wd2VHTXhiRmRUV0doVFZrVktWbGxzVWtkVlJteFhWMjVPYTFKc2NGcFphMVUxVlRGS2MxWllhRmROVjA0MFZrUktSMVl5VGtsUmJYUk9ZbFpLZUZaR1VrZFRNRFZYWVROa1dtVnNXbk5aVkU1VFVsWmFXRTFYUmxWaVJuQklWVzF3VjFaWFNsVlNiRkphWVRGd00xa3hXbUZXVmxKMFVteE9VMWRGU2pWV2EyUTBWVEZLY2sxV1pHbFRSa3BYV1d4b1UxVldWbkpYYm1ScVZtMVNXVlJXVmpCaFZrcFZVbTVvVjFac1NraFdWVnBhWkRKT1NWSnNhRmRsYTFwb1YxaHdRMk14U2tkV2JsSllZWHBXYjFsVVJsZE9iRnBGVVcxMFYwMXJXbnBaYTJoSFZsZEtXV0ZGT1ZaaGExcFhWRlZhVTJSWFRrbFViV2hvWld0YU5GZFdVazlqTVZaSFYydG9XazB5ZUZaV2FrNURWRVpzV0dWSVRrOWlSVm93V1ZWVk1WVXdNVmRXYWxKWFVtMVNNMWt5TVU5U2JVMTZZMFpXYUdFd2NIaFhWM2h2WWpKTmVHSklVbWxTZWxadlZGWmtiazFzVlhoaFJ6bFZUV3hhTUZsVmFFOVhSbHBHWTBWMFlWWXphRE5XYkZwSFpFZFdSMUZzVGxOTlJFSTBWbXBHYjJReFRuSk9WbHBPVjBWYWIxcFhlRXRWUm14WVpFaE9UMVp0VWxaVk1uTXhZVEF4V0dWR1dsWldla1V3VmtSR1lWSnRSalpTYkZKT1ZsUldOVlpIY0VOak1VcEhWbTVTV0dKSVFtOVphMlF6VFVaYVIxZHNUbEpOYTFwWVdXdFNZVmxYVm5KWGJXaFdZV3RhZWxSc1dtdGpiSEJHWkVkb2FWTkZTa2RXYWtsNFRVWmtjazFZVGxkWFNFSldXV3RhUzFSR2JGaGxTRTVZVW14d1ZsWnRjelZWTURGV1ZtcGFWMDF1VWxSWmJYaDJaVVpHYzFWc1NtaGhNSEI0VjFkNGEwNUZNVWRVV0dSb1VsUnNUMVp0TVRSTlZscElZMFZPYUdKVldsbFhhMmhMVjBaS1JtTkZkRlZXTTA0MFZteGFTMWRXY0VkalIyeFhWa1ZHTTFaclpEUmhNVlY1VTJ4YVRsZEdTbGRaYkdRMFdWWlNXR1ZGV214V2JWSjVWMnRWTldGV1NsVldWRXBYWWtkb2VsWXljM2hqYkdSMVZHeFdUbFpyY0ZWWFZsSkNUVWRXVjFac1ZsWmhla1pUVkZWV1dtVnNXa1pXYXpsU1RXeGFNRlpYZEhOV1IwcDBWVzVDVlZaRlJqUmFSM2hQWTJ4a1ZWWnRhRmRXUmxvMFZsZDRiMkl4VW5OVFdHUnFVMFZhVmxSVldrdFhSbXhWVW01a2FsWnJOVEJhUlZwM1lWWmFWVlp1YkZkU2VrSTBWbFJLUjJNeVRrZFdiSEJzWVRGd1VGZFhlRlpOVjBsNFdraE9WbUpyY0U5VmJUVkRVbXhrY2xwRVFsWlNhMVkyVjJ0ak1WWkdXWGxsUlU1YVZteFpkMVpyWkVabGJFWnpVVzE0VjFaWVFYcFdha2w0WXpKS2RGSnJhRk5pUjNoV1dXMDFRMkZHV1hkWGEyUnJZa1UxZVZZeFVsZGhSMHBJWkhwS1ZrMXFSbnBXUkVaaFVtMUtSVlpzVm1sU01VcG9Wa2QwWVdReVVrZFZiR3hvVW01Q1QxbHJhRU5OUmxwSFZteE9WMkpXUmpSWmEyaFRWbGRLV1dGRk9WZGhNVnA2Vkd0YVUyUlhUa2RUYlhoWFZrWmFSMVpzV2xOVE1XeFlVMnRzVldKcmNGbFZhMVozVXpGU1dHTXphRmRXYTNCYVYydGFkMkZXV2xWUldHUlhVak5vY2xaVVNrdFdhekZaVld4YWFWWXphR2hXUm1RMFVtMVdWMXBJU21GU1ZHeHdWV3hTVmsxc1duTmhTRTVZWVhwR2VWWXlOVTlXVlRGWFUyeFNXbFpGUlhkYVZscFhWbFpXYzJKR1drNWliRWw2VmxSR1YxUXhWWGhqU0U1b1RUSjRWbFl3WkRSWlZteFlaVVprVDFac1NsbFpNRnByWVZaYVZXSkZiRmROYWtZelZrZDRXbVF3TlZsVmJHaHBWMFZLUkZaR1dsWmxSazVIVkc1U2FsSXdXbGhWYkZwYVRWWmFSMWRzVG1oaGVrWkhWRlpvUjFac1drWlRiRUphWWtad00xbFdXazlqYkdSVlZtMW9WMVpHV2pSV1YzaHZZakZTYzFOWVpHcFRSVnBXVkZWYVMxZEdiRlZTYm1ScVZtczFNRnBGV25kaFZscFZWbTVzVjFKNlFqUldWRXBIWXpKT1IxWnNjR3hoTVhCUVYxZDRWazFYU1hoYVNFNVdZbXR3VDFWdE5VTlNiR1J5V2tSQ1ZsSnJjSGhWVnpBeFZteEtjazVWVGxwV1JWcDFXbFphVDFaV1RuSk9WbVJUVm14c05sWnFSbXBsUmxKeVRsVmFUMVp0YUZkWmJGSkhWREZzYzFkcmRHcFNiVkpXVlRKNFMxUnRTa2xSYTJ4WFVucEZNRlpFU2xkak1WcHhWbXhvVjFKWVFrbFhWM1JXVGxaYVYxWnVVbXRTVkd4UFdXdFdWbVF4V2tWVWJrNVNUVVJzVjFsclZuTlViRWw1Vlc1U1YxWkZTa3RVYkZwUFZteHdTVlJ0YkZkWFJrcEtWMWQwYjJReVJuSk5XRTVZVjBkU1ZWUlZWVEZXUmxKV1drVmtWRkl3Y0VwWk1GVjRWakZLUjFkdVVsZGlSa3BFVm1wR1ZtVkdaSFZUYkdScFVsUldZVlpHV21Ga01VVjRWMnhvYkZKVWJHRlpWRWsxVGtaYVNHUkhSbGRpVlhCSVdUQldhMVl4V1hwWmVrWlhVa1ZhU0ZadGMzaFdiR1J5WkVVMVYxSlZiM3BXV0hCSFZERkZkMDVJWkdsU1ZrcFhXV3hhZDFsV2JGaGxTRTVQVW14S1dGWlhkRTloUmxwMFpIcEtXR0p1UWtoWFZscEtaVWRLUlZac2FHaE5iRXBOVjFaa05HUXhTbGRhU0ZKclVtNUNUMWxyV2xkT2JGcElaVVpPVkUxclducFphMXB2VmpGYVIxZHNRbFpoYTFwSFdsZDRhMk5zVm5ST1YwWk9WbFZ3VmxaV1kzZE5WbXhYV2tWa1ZHSnNjR0ZaVjNNeFZVWlNWbGR1VG10V01IQktWbTE0ZDFZeVZuSlhibkJXVFZaYVVGbHRNVVpsVmxaeVlVZG9WRkpWY0hoWGJGcFRVVzFPYzFwRlZsTmhlbXhVV1d0YVlXVnNXWGxrUjBaWFlsVndSbGxyV205V2JGcHpZMFY0VjJFeGNISlViRnAzVWpGV2MxUnNaR2hOTUVwYVZteGtORmxXVFhoalNFNVdZbXR3VkZsWWNGZFdSbHBWVTJ4T2FFMVZNVFJXVnpWM1dWVXhjbGRzYkZkTlYwMHhWVEo0V21WWFZrVlhiSEJzWVROQ1dWWkdWbGROUmtwSFZtNVNXR0pJUWs5WldIQkdUVlpaZUZwSVpGZGlWbHBYVkZab1IxWXlTbFZTYkVaV1lXdGFNMWt4V2xOV01YQkdUMWRzVjJKclNqUldWbHBUVWpGU2MxTllaR3BUUlZwWldXdGFTMUl4Y0ZkV1dHaFhWbTEzTWxWWGN6RmhSMHBHVm1wT1YxSjZRalJYVmxwelkyMU9SbHBHUWxkTmJtaFJWMVprTUZZd05VZFZiRnBoVWxoU2IxbFljSE5TYkZwMFRWUkNXbFl3V25sWk1HaExWMFphTmxKc1FscFdSVVY0V2tWYVYyUkhUa2hTYkdSVFRVUkZNRlpyV21wbFJsRjVVbXRrYWxKc1dtOWFWM1JMWVVaV2NscEdUbXBpUmtZelZqRm9hMkZzU2xsVmJGWldWbTFSZDFZeFZYaGphelZaVW14V1YyVnJXa3hXUmxwV1pVZE9WMVJzVmxOaVZWcHZXV3hrYjAxR1dYaGhTR1JUVFd0YWVsa3dhRk5YUm1SSVZXeENWMkV4V2t4Wk1GcHJWbFpPYzFkdGVGTldSVm8wVmxkNFUxUXhVWGhUYTFwb1RUSlNWbGxVUmt0aFJteHpWMjEwVDFac1dqQldNbmgzWVVkS1NHUjZRbGRTYkhCVVZWUktSMVl5U2tWWGJVWnNZVEZ3YjFaWGNFZGpNRFZYV2toS1lWSllVbTlaYTJoRFVteFplVTFVUWxoaGVrWjZWbXhvZDFaWFNrZFRhM2hhVmpOb2VsWXdXbUZXVmxweVQxWk9UbFpXV1RKV2Frb3dWVEpKZUdORldtbFNWbHBQVldwS1UxUkdWblJqU0U1cVVteEtNRmt3Vm1GaVJrcFZVbXRzVmsxcVJqTldWVnBMVWpGa2RWTnNhR2xYUlVwTlYxWlNSMk15VWtkVmJsSnJVbFJzY0ZadGRIZGxSbGw1WlVaT2FHRjZSbGRVVm1oVFZsZEtXR0ZIYUZkaE1sSTJXa1JHYTJOc1ZuUmtSMmhPVWtkNFIxZFljRXRoTWtwWFZsaGtWR0p0VWxsWmJHUTBaR3hyZDFwRk5XeGlSa293V2xWa01GVnJNWFJWYm14WVlURmFjbGxxU2s5VFJsSnhWbXMxVWsweFNtRldSbHBXVFZaSmVGZHNhR3hTTUZwVVdXdGFZV1ZzVVhoWGJYUldZa1p3ZVZrd1dsZFdNREI1WlVoS1YyRXhjRXhXYWtaUFl6RndSMVJzWkdoTk1Fb3dWbXhhWVZZeFZYaFRiR1JYWW10S2FGVnFSa3RVVmxwVlUycENhV0pJUWxwWmExWkxZVVV4V0ZwRVZsWmlSa3BZVmtSR1lWSnRTa1ZVYkZab1RWVndURmRzVmxaTlYxSkhVMnhzWVZKVVZsUlZiVEV3VFRGYVNHUkhkRmROYTFwSFZGWldiMVV4WkVoVmJFWlhZV3RhZVZwVldsTmpiRlp5WTBVNVUxWkdXa2RXYTFwVFVURlNjMWRZYUdwVFJYQlZWbXhhUjAweFpIRlNibHBzVm14d2VGVlhNVzlWTWxaMFpIcEtXR0V4V25KVmVrRXhWakpLUjJGR1dtbFhSa3A0VjFaYVYxSXlVbk5VYmtwb1VtczFjRlJYZEdGWGJGcEhZVVpPVmxZd2NFWlphMXBYVm0xS1IyTkZlRmRoYTFwTVZtcEdUMlJHWkhOYVIyaE9VbTVDVmxadGVGTlNNbFowVTI1T1YxZEhVbGhaYTFVeFYwWnNWVkp0UmxkU2JWSkdWVmQwYTFVeFduSmpSV2hXVFZkTmVGWXhXbFpsVjA0MlZHeFNWMVpVVmxWV01qRTBZekpPVjFwR2JHaFNWRlpZVld4V2QyUXhXWGhoU0dScFlYcEdXRmt3Vm05WFJtUklaVWRvVm1GclNqTlpNVnByWTJ4V2RGSnRhRTVXTTFFeFZtMTRVMVF4VVhoWGExcHFVMFZhV1ZadE1WTldNVkp6VmxSR1ZGSnNXbFpXUnpGSFZURkplVlZ1VmxkV1ZuQlFWVlJLUzJNeVRrZGlSbHBwVmtkNGQxWkdVa0pOUjFGNFdrWm9UMWRGTlhKV2JURTBWMVpTVjFwRVVsUmlSVlkxVjJ0b1MxZEdTa1pqUldSVllrWlZlRlpzV2s5WFZuQkdUMVpPVTFZelkzZFdhMk4zWlVaS2RGVllaRTVXVmxwWlZtdFdTMVZHVm5GU2JVWnBUVlpLVjFkclZtRmhNREZGWWtac1YwMVdTa2hXUkVaTFVtMUdObEZzVm1oTlZYQlFWa1pXVm1WR1pFZGFTRkpyVWxob1dGVXdWVEZrVm1SWFYyMTBXR0pWYkROWmExcHZZVlpPU1ZGdVJsVldNMmhoV2tSR1RtUXhVbk5VYlVacFVqTlJNVlpyV205ak1XUjBVbTVPVjJGc1dsWldhazVEVjBac2MxWlVWbFJTYlZJd1dUQlZNVll3TVVWV2FrSlhUV3BHTTFWWGMzaFdhekZXWVVaU2FWZEZTbTlXYlhSWFZqQTFWMVZzWkZaaVdFSlBWV3hTUjJWR1dsZFZhMDVWVFd0d1dGa3daSE5XUjBWNFlYcEdXbFpzVlhoWk1WcExWMWRHUms1V1RrNVRSVW8wVm10U1ExVXhXWGxTV0docVUwVmFWVmxzYUZOWlZteHpWbFJHYW1KR1NqQlVWbHBQWVVkS1NWRnNXbGhYU0VKSVZrY3hTMVpyTlZoUFZtaHBVbXR3TlZaR1ZtRmtNVXBYWTBWb2ExSnJTbFJaVjNSTFRURldObEpyT1ZKaVZWWTBWMnBPYzFaWFNsbFJhemxhWWtaYWVWcFZXbE5YUjA1R1kwVTFWMkpyU2pSWFZsWnFaVVprZEZadVNsaGlhMXBaV1d4U1IxbFdjRVZSVkVaWFZtdGFNRmxyV25kVWJVcEhWMVJDVjFKdFVqTlZiWE4zWkRBMVZsWnNVbGRTVlhCUlZsZDBZV1F5VWtkWFdIQnBVbXMxYUZsclpEUmxSbGw0WVVjNVZXSkdjRWRWTWpWRFYwWmtTVkZ1VmxWV2JIQXpWVEJhYTFkWFNraFNiRTVPVTBWS05GWnFTakJWTVd4WVVsaG9hRTB5ZUZoV2ExVXhWVVphY2xadVpHcFdiVkpZVjJ0YVlWUXhXbFZXYTJ4WFZteEtVRmRXV2t0VFIwWklaRVpTVjFacldYcFdNbkJEWkRGSmQwOVdhR2xTVkd4dldWUkdXazFHV2tkV2JYUlVUV3RhZVZReFZsZFdNa3BaVlcxb1dsWXpVak5aTW5oclYwVXhWazlYYUU1U1JsbDNWbXhqZUdReGJGZFhhMmhWVjBkb1ZsWnVjRWRWUm14V1YyNWtWMVl3V1RKVlZ6RkhWVEZKZUZOdWJGZFNSVXBVV2xkNGRtVldTbk5oUm1oWFpXMTRUVlpYTVhkak1rNUhWVzVTYWxKV2NITlZiRkpIVTFaVmVVMVlaRlpTYTNCSVZqSTFTMWRIU2xsUmEzaGFWa1ZhZWxwRldsTmtSMUpHVDFkc1YyRXpRalJXYWtvMFZUSkdjazFXV2s1WFJrcFdXV3hrYjJGR1duSmFTSEJyVFZkU2VWWlhNVEJoUlRGRllrVldWbFp0VW5aV1ZscFdaREZLZFZOdFJsTldNVW95VjFSQ2ExUXdOVlpOVlZKclVtMTRUMVpzVWxkVFJscHpXa1JTV2xacmNIcFdiVFZQVlVaYWRGVnNUbGRpV0ZJelZteGFXbVZ0U2toa1JtUlRZVE5DV1ZaVVNqUmhNVlY0VjI1S2FsSjZSbGRXYlhoaFZrWldjMWRzWkdwU2JrSkpWbGQwTkZack1VWmhNM0JXVFZaYWNsbDZTa3RXYlZKR1ZXeE9hV0V3Y0hoV1JsSkNUVmROZUdORldsVmlWRlp2VkZaa2EwNVdXa2hOV0dSVllsVndWMWxVVG05V1ZsbDZVV3QwVlZac2NETlpNV1JIVTBVeFYyTkhlR2hOV0VJMFZtcEpkMlZHWkhSVldHUlBWbXhhVTFsc1pEUlpWbEpZWlVaa1QxSnNTbGxaTUZaaFZHc3hSVlpyV2xaTlZrcEVWa1JHUzFJeVRrbFZiR1JPVFc1b1ZWWkdWbXRTTVU1SVUydHNhbEpVUmxoVmExcGhaRVphYzFWclRsZE5WbFkwVmpJMVMxWXlTa1pPVm5CVlZteHdNMVZVUm1GWFIxWkdUMVp3YUUxcWF6QldhMlF3V1ZaYWRGTnJaR3BTVjFKWVZtcE9hazFXVmxobFJYUlRZa1phZWxaSGREQlViRnBHVjI1S1ZtVnJXbEJaTW5oMlpESk9SbHBHUWxkTk1FcG9WMnhrTUdReVRrZFZiazVXWVROQ2MxWnNVbGRYVmxsNFZXeE9XbFl3Y0ZkVVZsSlRWMFphUm1OSGFGcGlSbFkwVld4YVlWZFdjRWRqUjJ4WFZrWmFObFpyV21GVk1VNTBWbXRhVDFaR2NGZFdNR1EwVlVaV2NsZHJXbXhXYlZJd1dsVm9kMkZGTVhOVGEyeGFWbGRvUkZsWE1WZFdWa1paVTJ4b1UxSldjRkZXVnpFMFZqSk5lRnBJU2xoaVJuQndWV3RrTkZkV1dsZFhiVVpVVFZad1NGZHJVbGRaVmtwelUyeFNWMkpZVWpOV01GcFhZekZrY21SSFJtbFNWbkJZVm14a01GWXhXblJTYkdoV1lsaFNXVlZ0Y3pGUk1WRjRWbTVPVTFKc1duaFZWekZ2VlRBeGRWcDZTbGRTVm5CVFZGWmFkMk14V2xsYVJtUnBVbFJXV1ZkV1VrZFpWbHBIV2tWV1UySlZXbE5aYTFwaFpXeGFTRTFWZEZSTlJFWlhWR3hXYTFZeFdYcGhSMmhXWWxob1dGbDZRVFZXYkU1elZHeE9WMkV6UWxaV1ZFcDNVbTFSZDA1SVpHbFNWM2hQVldwS1UyUkdXbFZSYTNSclRWZFNNRmxyWXpWaFIwcFdZa1JhVjJKVVZsaFpWRVpHWlZad1NWTnNhRk5TV0VKUlYxWmtlbVZIVWtkVWJGWlRZWHBXYjFsVVNqQk9SbGw1VFZoa2FVMXJjRmhaYTFKaFZUSktXVkZ0YUZwaVJuQjZWRlJHVTJNeFZuSlViV2hYWWxoUk1WWnRlRzlpTVZKMFVtNUtWMWRJUWxaWlZFWkxVekZTVmxaVVJsTldiVkl3VkZaV05GWnJNVVpXYm14V1RWWmFWRlZYTVU5U2JVcEdZa1pTYVZkSGFIbFdWRUpoV1ZVMVYySklVbWxTVlhCdlZGWmthMDVXV2toTldHUlZZbFZ3VjFsVVRtOVdWbGw2VVd0MFZWWnNjRE5aTVdSSFUwVXhWMk5IZUdoTldFSTBWbXBKZDJWR1pIUlZXR1JQVm14YVUxbHNaRFJaVmxKWVpVWmtUMUpzU2xsWk1GWmhWR3N4UlZacldsWk5Wa3BFVmtSR1MxSXlUa2xWYkZaT1RXNW9SVmRVUW1Ga01rNUhZak5zYTFKdGVITlphMXBYVGtaYVNFMUlhRmROYTFwSVdUQldiMVpXV2taalJrSmFWbnBHVkZwRldtdFdWazV6Vkcxb1RsSkZXa2RXYWtsM1pVWnNWMWRZWkU1VFNFSlpWakJvUTJWV2NFVlJXR2hZVW0xU01GbFZWVFZWTVVsM1RWUldWMUl6YUZSVlZFcExWbTFLUmxack5WTlNNMmhNVmxaU1MxVXhXbGRXYkdSWFlsVmFWRmxyWkd0Tk1WSlhWMnRPVmsxVmNGaFdiVFZYVmtaYVdGcDZRbFZOUmxwNlZXdGFWMlJHWkhKUFZtUlRZa1paTVZacVNqUmhNVWw1VWxob2FWSkdjRmxXYTFaM1ZVWlNXR1ZJWkdwV2JWSjVWMnRhUzJFd01VVldha0pYVFdwRk1GWXlNVmRrUmxaMVVteFdUbFpyY0VSWGJGWmhaREpTUjFOc1ZsSmhlbXh6V1d0a01FNUdXa2RXYlhSWVlrYzVORlZYZUZkVWJFbDVWV3Q0VlZaV2NHaFdhMXBoVjBkT05sWnNXazVXTWxGNlZrUkdZVkl4VlhoWGJGWldZbXhhVlZSV1ZURlNSbkJYVjI1a1dGWnNXbmhWYlRGM1lWWmFSMU51VmxaTmJsSmhWR3RWZUZack5WZFdiR2hwVjBkb2FGWnRjRWRUTWs1WFZXNVNhbEp1UWs5VVZtaERUVVphU0UxVVFscFdhM0JIVld4b2MxZEhTbFZTYkdoYVZqTk5kMXBXV2xOV1ZscHlUbFpPVTFadVFYZFdha1poVlRGV2NrMUlaRTlYUlZwWVZqQmtVMkZHYkZoT1ZUbHBZa2QwTlZSV1dtdFViRWw0VTJ4d1ZrMXFWbGhWTW5oR1pWWldjbVJHWkZkV2JYTjNWa1pXVm1WR1NsZFdiR2hQVm10S2MxWnNWbkpOVmxWNFZtMTBXbFpVUmxsVk1qVlRWbGRHY2xOdE9WZGlia0o2VkZaYVQxWnNaRlZXYld4cFUwVktZVlpzWTNoWlYwWlhWMWhrV0dKcldsbFZhMVozVTBac1ZWSnVaRlJXYXpVd1dsVmtkMVJyTVVWU2FrcFdaV3RhVUZWVVFUQmtNa3BHVld4YWFWWnVRbEZXYlhSaFZtMVdWMXBJVG1GU1YxSnZWRlprTTAxc1dYaFZhM1JWVFVSR2Vsa3dhRWRYUjBWNVZXeE9ZVkpGUlhoYVJWcHJaRWRXUjJOSGVHbFdhM0EwVm10U1IxVXhSblJXYTJScVUwWktWRlpyVmt0VlJuQllaVWhLYkZKc1NsZFhhMXAzV1ZVeFZsTnNWbFpXYlZGM1dWUkdTbVZYUmtsYVJuQk9UVzVSZWxVemNFZGliVlpYWTBWb2JGSXpVbFJaVnpFMFpVWmtXR05GY0U1V01IQlpWVzE0YjFkck1YRmlSVEZYWVRKb1VGbHRlRTlqYkdSVlZXczVVMVpHV2xwV2JYaFRWREZrZEZKdVVtcE5NbWhXVm0weFUxVXhVbkpXVkVaWFZteHdXbGt3VlRGVk1ERkpVVzVhVjFKc2NGUlpha3BIWTJzeFZsWnNXbGRTYTNCdlZsZHdSMUpyTVVkYVJtUldZVEZ3VUZac1VrZGxSbFpZVFZSU1dsWnNWak5WYkZKWFZrWmFXR0ZHUWxWV1YxSlFXa1phVjJSV1pIUmlSazVzWWxoUk1sWnFTalJpTVU1MFUxaG9WMkV4Y0c5VmJYUmhWMnhTVmxWdVRsZFdhekUwVmxjMWQxbFZNWEpYYkd4WFRWZE5NVmxYYzNkbFJtUjFVV3h3YkdGNlZsVlhiRnBYVFVaS1IxWnVVbGhpUlVwVVZXMTRkMlZzV2toalJYUlVZWHBXVjFSc1dsZFZNa3BaVld4R1ZtRXhjRmRhVlZwVFYxZE9SbFJ0YUZkaVdHaFhWbGQ0VTFVeFpIUldia3BUVjBkU1ZsUlZaRk5XUm14VlVWUldWRkpyY0ZwWlZWcERWakZLV0dRemNGZE5ibWh5Vm0weFRtUXlTa1pXYkVwWVVsUldURlpYZEZabFIxRjRWbXRrVmxkSFVuQlpiRnBIVGxac2NtRkdaRlJOYkZwWldrVmpNVmxXWkVobFJVNWFWa1ZhZFZwV1dtdFdWbHAwVW14a1UxWXpVVEZXYTFKRFZURmtkRlpyWkdsVFJWcFlXV3hrYjFsV1duSmFSemxxVm14S1dWa3dWa3RVYXpGRlVXcFdWMUpzU2toV1ZWcExVMFpTV1ZwR1ZtaE5WWEJvVmtaa05HUXhTbGRWYkZaU1lraENXRlZzV25kbFJsVjRWbXhLYTAxWE9UUlpNRnB6WVVaT1NGVnVRbFppYmtKNldUSjRhMk14VW5ST1YyaE9Za1Z3U2xkV1ZtOVJNa1owVm14V1VsZEZjRmxWYTFaS1RVWlZlV1ZHVG1waVJuQjVWa2Q0WVdGRk1WZGpSVkpYVmtVMWVsUlVSblprTWs1R1drWkNVMUpXY0ZGV2JYUmhaREpOZUZwR1pHRlNhelZ2V1Zod1YyVkdXWGhWYXpsYVZqQndWMVJzYUV0WFIwVjRVMnRPVlZZemFETmFSVnBoWkVkT1JrOVZOV2hsYTBZMFZtdGFWMVV4U1hsVGJHUnBVbXhhVjFaclZURlZSbXhZWlVaa1RrMVhVakJaYTJoTFZEQXhTR1ZGYkZkTmFsWm9XVmN4UzFZeFpIUlBWbWhYVWxoQ01WWXljRU5OUmtwSFZtNVNXR0pWV205WmJHaHZaV3hhUjFwSVpGaGhlbFpIVkd4b1IxVXlTbGhsUmtKWFlXdEthRmxxUmxKa01YQkdUbGQ0VjFaRldrZFdNVkpQWkRGa2RGWnVUbGRXUlVwV1dXMDFRMVV4VWxaV1ZFWnFWbTFTTUZwRlZURmlSMHBHWTBoYVYxSnNjSEpXUjNoMlpVZEtSMkpHVmxkTmJFcE5WbGN4ZDJJd01IaGFTRXBoVW01Q1QxbHJaRFJYVmxwWVRWUkNWVTFFUm5sWlZFNTNWMFpaZWxGck9XRlNSVnA2VkcxNFIyUkhSa1pQVms1T1ZsWnNObFpyV21GVk1WWnlUbFphVDFadGFGbFdNR1JUVlVaV2NWRlVSbWxOVjFKNVYydFdhMkZHU25WUmExcFZWbFUwZDFWNlJrdGpWMFpGVld4V2FFMVZjRXhXUm1RMFpERk9SMWR1VWs1V1ZHeFlWV3BHUzJWV1drZFpNMmhXWVhwR1YxUldXbGRXTWtwWVpVZG9WbUZyV2tkVVZWcFRaRVV4Vms5WGFGZGlXR2QzVm0xNGIyTXhVWGhUYTJSWFZrVmFXVlp1Y0VkVlJteFhWMjVrYWxJd1ZqVlhhMlEwWWtaYVZtTkVUbGROYWtaNldXcEtVbVZXVW5WVmJHUnBWa1phWVZaR1pIZFNNa2w0WTBWYVlWSlViSEJVVldoVFVsWlZlR0ZIUmxWU2EzQXhWa2R3VDFaV1NuTlRibkJhVmxaWk1GWXdXbXRrUmxaellVZDRhRTFHYkROV2ExSkhZVEZLZEZWclpHcFRSVFZQVm1wQ2QxUnNXbkpoUlU1b1RWVXhORmxWYUhkVWJGbDRZMFpXV2xaWFVreFdSM2hIVG14R1ZWSnNhRmRoZWtVd1YxZDRZV0l4V1hsVVdIQmhVbFJHV0ZWcVRtOWtiRnBHVjIxMFdsWnVRa2RhUlZwVFZVWmtSbE5yZEZwV2JXaHlXVzE0VDJOc1pGVlZiWGhUVmtaYVIxWlVSbE5UTVd4WFUxaG9XR0pzU2xaWmExcExZMnhzVlZGWWFHdFNiRnBXVlcxek1WWXhTbk5qU0dSWFRXNVNjbFpYY3pGU2F6VlpWV3hXYVZZemFHaFhWM2hoVmpBMVYxVnVTbFppUm5CUVZtMHhORTFHV2toTldFNWFWakJhV1ZwRmFHdFdSbHBZWVVSYVdHRnJTak5WYWtFMVYwZFdSMUZzWkZOV1Zsa3hWbXRrTUZVeFZuSk5WV1JxVWxkb1ZWWXdaRFJWUmxweVYyMUdhbEp0VWpCVVZscGhWREZhVlZac2JGZFdla1l6VmtkNFMxTkdhM3BoUmxab1RWVndUVmRXWkhwTlYxSkhWRzVTYkZKVWJIQldiWFJhVFVaYVIxcElUbEpoZW14WFdXdFdjMVp0U25SbFJ6bFhZbTVDUkZwSGVFOWpiR1JWVlcxNFUxWkdXa2RXVkVaVFV6RnNWMU5ZYUZoaWJFcFdXV3RhUzJOc2JGVlJXR2hyVW14YVZsVnRjekZXTVVwelkwaGtWMDF1VW5KV1YzTXhVbXMxV1ZWc1ZtbFdNMmhvVjFkNFlWWXdOVmRWYmtwV1lrWndVRlp0TVRSTlJscElUVmhPV2xZd1dsbFpNM0JQVmtaYVdHRkZlRnBoTWxKVVZURmFZV1JYU2toaVIyaFhWbGQzZWxZeFVrcGxSMDE1Vld0YWExSlhlRlpaVjNSaFdWWnNkR042UW10TlYzUTFXV3RqTVdGRk1WaGFSRlpYWWtaS1dGWkhlRXRTTWtWNldrWldhRTFWY0ZWWFZsSkhZekpPVjFSc1ZsTmhlbXhZVkZWb1EwMUdXWGxsUms1cVlYcEdXRmt3Vm05V1ZtUklWV3hHVm1FeGNGZGFSRVpUVjBVeFZrNVZOV2xTTTJkM1ZtMTRVMU14YkZkVGExcFhZV3hhVmxWc1ZURlNSbkJZVFZaT1ZGWnJOVEZaYTJSM1ZUSldkR1I2U2xabGEwcFFWbFJHZDJNeVRrZFdiV2hPVFd4S1VWZFdaRFJTYlZGNFZXNUtZVkpyTlc5V2JGSkhaVVphYzFWclpGaGlWWEJZV1RCb1QxWlZNVmRUYkdoYVZrVmFlbFJ0ZUVkV1ZsWnlUMVprVTJFeGEzaFdha1p2WkRGc1dGSnNaR3BTYkZwWldXeG9VMVF4V25KV2JrNXNZa1UxVjFaSGRIZFpWVEZJWlVoa1dsWkZOVVJXUlZwaFUxWlNkRTVYUm1sU1ZGWkZWa1JHVjJNeFRsWk5WV2hoVWpCYVdGUlVTbTVOYkZsNVpVVTVVazFFVWpOWmExWlRWbTFLVjJOR1FscFdNMUpJVkZSR1UyTXhjRVpqUjNST1VrWlZlVll4YUhkV01WSjBVbTVLVkdKck5WbFdhazVEWkZaU1dHVklUbGhTYkVwYVdXdFZNV0pIUlhkV2FsSlhVbnBHTTFsWGMzaGphelZYVm0xb1UwMHdTbEpXVjNSclRrZEplRlZ1U21GU1ZuQm9WRlpXUzFaV1ZsZGFSRUpvVFZWc05WbFZhR3RYYXpCNVpFUk9WR1ZyV25WYVZscDNVMGRXU0dSR1RtaGlXR1ExVmpGb2QxSnJOVlpOV0U1cFVtMTRWVlp1Y0hOVVJsSllZMFZrYVUxWFVscFphMlIzWVdzeFNHVkZWbGRXZWtab1ZsVmFTMUl4WkhWVWJGWm9ZVE5DVEZaSGVGWk5WbHBYVTI1U2ExSnJTbFJWYlhoWFRrWmFSMkZJWkZKTmExcFlXV3RhVjFVeFdrZFRiVVpoVmpOU1IxcEVSbEprTVhCSFZHMW9UbEpIZUVwV1YzaHZZakZXUjFkcldtbFNSVFZaV1d0a1UxWXhhM2RXVkZaUFZtdGFXVnBGV25OaVIwWTJVV3BhVjFKNlZqTldiWE4zWlVkS1IxWnNUbWxYUlVwU1ZtMTBWazFYVGtkVmJrNVdZVEJ3VDFSV1pEUmxSbXhaWTBWMFdsWXdXbnBXYlhCVFZsWmFSbU5HVWxwaE1YQjZXa1ZhWVZaV1NuTmpSbVJUVmtWSk1WWnFTWGRsUmxKeVRsVmFhVkpXV2s5VmFrcFRZMVpTVlZKcmRFOVdiWFF6VjFod1YySkhSWHBWYTFaWFZucEdhRlpFUm1GU01WcFpZa1pvYVZJeFNrbFhWbEpIWXpBMWMxcEdWbFJoZW14UFdXdG9RMlZHV1hsa1IzUldZbFpHTTFSc2FGTlhSMHBaWVVkR1lWWjZSbFJaTVZwU1pVWldjbE50ZUZOaWEwbDNWbGQ0VTFFeFVYbFdiazVvVFRKb1ZsWnNaRk5aVm13MlVXNU9VMUpzV2pCV01uTTFZVWRGZDFkWWNGZFNNMmh5VlRJeFVtUXdOVlZYYkhCc1lrWndVRmRXWkRCVE1rMTRXa1pvYWxKNlZrOVphMlEwVjFaYVIyRklUbFZpVmxwNVZXeG9iMVpYU2xsUmJrWlZWak5OZUZac1pFZFRSMDVIVVd4T1UwMHlhREpXYTJRd1lURktkRlJyV2xCV1JscFRXVzEwUzJGR2JGZGFSM1JxWWtkU1Nsa3dWVEZVYXpGRlZsUktWMkpHU2xCV01uaGhVbXhrZFZKc1ZrNVdhM0JSVjFaYVZrMVdXbGRTYkZaVllraENiMWxzYUU5T1ZsbDVUVmhrVjJKV1drZFVWV2h6Vm0xS1dXRkhSbHBpUm5CWFdsVmFhMVl4Vm5KT1ZUVnBVMFZKZDFacldsTlZNVkpIVmxoa1ZGWkZOVlZXYkZVeFZrWmtkR1ZJWkdwV2JIQXdXa1ZrUjJGSFNsaGhTR2hYVW14d2NsWnRNVmRqYXpGWFlVWldWMUpZUWxKV1YzUldUVmRKZUZwR2FHcFNlbXh2V1d0b1ExSnNXWGhWYTA1VllYcEdlVmt3YUVOV1ZtUkpVVzVHVldKR2NETldNRnBMWkVkT1NGSnNUazVXYkhBeFZteFdZVlF4UlhkTlZXaFZZbXhLY0ZVd1drdFVWbFYzVmxSQ2JGSnRVbGxVYkZVMVZHeEpkMDVZWkZoaGEyOTNWakZrVjJNeFdsbGhSbFpwVmtWYVdWZFdWbUZrTVU1SFZXeFdWR0Y2Ykc5WmJGcExUVVpaZUZWcmRGWk5hMVl6VkZaV1YxZEhTbFZTYldoWFlXdEdNMXBYZUd0WFYwNUpVMjEwVGxKRldscFdha2w0WWpGUmVGTnJhRlZYUjNoV1dXdGFTMUpHYkhOV2FsSlRVbXRhV1ZReFZqQlZNa1owV25wS1YxSjZWak5aVjNONFZtczFTV0pHVGxoU01taG9WMnhqZUUxRk5YTmFSbWhxVW14d2NsUlZVbE5PVmxWNFZXeGtWVTFyY0ZoWlZFNXZWbFphYzFOc1FscFdSVm96VmpCYVQyUkhWa1pQVm1ST1VteHJlVlpyWTNkbFJteFlVbTVLVUZaV1NuSlZNR2hEWTJ4VmQxWnVaR3hpUjFKNlYxaHdRMkZWTVVsUmEyaFZUVVpLVEZaSGVFdFNiRXBaWVVab1YwMHdTa1JXUmxKQ1RWVTFkRkpZY0dsU1ZGWlVWRlphZDJReFdrVlJiRTVhVmpCYVNGbHJVbUZXUm1SSlVXczVWbUV4Y0ZkYVZscFRaRmRPUjJORk5WZFdSM2hLVm10YVUxVXhWa2RYV0dSWFYwZFNXVlp0Y3pGbFZtdDNWbXBDVjFJd1dUSlhhMVozVmtaS1dWRnVjRmhoTVZwMlZtcEtWMWRHVG5WUmJFcG9ZVEJ3ZUZkWGVHdE9SVEZIVkZoa2FGSlViRTlXYlRFMFRWWmFTR05GVG1oaVZWcFpWMnRvUzFkR1NrWmpSMFpWVm14d00xVXdXbXRXVmxaelkwZDRhRTFZUWpaV2ExcHZaREZKZVZKdVNrOVhSVnBvVkZST1ExbFdXbkZSYmtwT1VtMVNWbFV5ZUV0VWJVWTJWbXRhVjFKNlJucFdNakZIWTJzeFNXTkdWazVXTVVwWlYxWldZV050VmxkV2JsSnNVbFJHVTFSVlZscGxiRnBHVm1zNVVrMXNXakJXVjNSelZrZEtkRlZ1UWxWV1JVWTBXa2Q0VDJOc1pGVldiV3hYVmtaYVdsWnNZM2RsUmxaSFUxaGtUbFpHU2xsWmExcExWREZ3VmxkdVRrOWlSMUpXVmxkek1WUnRSWGhqU0dSWFVrVktjbFpFU2taa01EVlpVbXhhV0ZORlNtaFhWM2hYWXpBMWMxVnVWbXBUUlRWd1ZXMHhORmRXV2toTlZFSmFWbXhXTmxkcll6RldSbGw2V25wQ1lWSnNXbnBaTUdSR1pXeEdjbVZHWkZSU1ZGWXhWakl4TkZReFJYZFBWbHBwVWxkNFZWbHNhRzlqYkZWM1YyMUdUMVp0ZURCWmExWkxZVmRLUjFOc1pGWmlXRkpVVmpGa1YyTXhTbkZVYkZab1RVUldlRlpIY0VOak1VNVdUVlZvWVZJd1duQlphMXAyWlVaWmVGVnJPVlpOYXpWSlZURm9jMVF4U1hsVmJIQlZWbnBHVkZsNlJuZFNiR1JWVm0xNGFWTkZTbUZXVkVwM1V6RnNWMXBGV21wU2VrWmhWbTB4VG1WR2JITmFSWFJQVm0wNU5sVlhkSGRXUms1R1RsaFdXRlpzY0hKV01qRktaVWRPUjJGRk5WaFNNVXA1VmxSQ2EwMUhVbk5VYmtwb1VtczFjRlJYZEdGWGJGcEhZVVpPVmxZd2NFWlphMXBYVm0xS1IyTkZlRmRoYTFwTVZtcEdUMlJHWkhOYVIyaE9VbTVDVmxadGVHOWpNazUwVkd0YWFWSlhlSEZVVnpGVFZFWlZkMWRyZEd0aVIzaFlXVlZWTVdFeFNuSlRha1pYVW5wRk1GbFVSa3RqVjBwRlYyeG9hVkl5YUUxV1JtUTBaREZrVjFSdVVsaGlXRkp3Vm14YWRrMVdaRlZVYms1cFlsVldORmRxVG05V1YwVjRZMFprV21FeGNETlZha1poVjBkS1NWTnJPVTVTTTJoTFZrWldhMkV4VFhoVGJrWm9Va1pLVmxsVVNsTlVNVkpWVVZob1QySkZOVEJaYTFVeFlVZEZkMVpZWkZkTlYyZ3pXVmR6ZUZack1WbFZiRkpwVmpOb1VGZFdZM2hpTWs1eldrWmtWbUpJUWs5V2JUVkRVbXhaZVUxVVFsaGlWVnA1Vlcxd1UxZEhSWGhUYm14VllURldORmt3V2tkV1YwcEdZMFpPVGxKdE9IaFdNVkpLWlVaSmQwNVdXbXRTVmtwdldsY3hVMU14Vm5GVGFsSnJVbXN4TTFkcmFFOWlSMHBXVFZSV1YySllRa1JXUlZwR1pVWk9XVnBHY0ZkV01VbzJWMnhrTUU1R1dsWk9WbWhZWWtad1QxVnRlSGRXVmxwMFRWUkNWMDFXVmpSWGFrNXZWMGRGZDJOR1pGcGhNVlY0V1ZaYVQyTldTbkpQVms1cFVteHdObFpxU2pCWlZscDBVMnRXYVZKVk5WZFpWRVpoVmtaYVZWRnVXbXhTVkVaS1ZWZDBkMVZyTVZobFJFSldUVlphVUZsdE1VZFRSbEpaWTBaYWFXSllhSGhYVnpFd1V6QXhjMkV6Y0dsU2VsWnZWRmQ0UzFOV2JGWmhSVTVvWWxaYVZsVldhRXRYUmtwR1YyeENWbUpZYUZoWmVrWnJZMnhrYzFkdGJGTlNNMmhhVm14YVlWbFdUWGhYYTJSaFVrWmFhRlZ0ZUV0V1JscDBaRWhrV0ZKc1ducFdNblF3V1ZkS1JsZHNaRmRXTTFKWVZtMHhSMWRHVm5Sa1JsWlRWbFJXUkZkWE1YcGxSbHBYVkd4V1ZXRjZSbTlaVkVKYVpVWmFSMVpyTlU1U01WcEhXVEJTVjJGRk1YUlZibEpXVFVkb2NsbHRlRTlqYlVaSFZHMXNUbUV4Y0dGV2ExcHZWVEZXV0ZKWVpGaGhlbFpZVld4YVZrMVdXWGRYYlRWclRXeGFTRlZYZUV0VWJFcFhZMFU1Vm1WcldsQlpNbmgyWlZaYWNWWnNTbGROTVVwaFYyeGtNRlp0VVhoYVJteHFVak5DYzFsWWNFZE5SbFY0WVVoT1ZXSkZjRWxaVldoSFZsZEtkVkZzWkdGV2JIQjZXa1ZhVDFkWFNrZFJiRTVPVmxoQ01sWnJZM2hrTVZsNVVsaGtUMWRHU2xkWmJHUTBWREZXY2xadFJtcGlSa1kwVmxjd01XSkdXblJWVkVaWVlURndWRlpVUm1GamJVNUhZVVphYVZKdVFrMVdNakUwVWpGYWMxWnVTbGRpUm5CdlZtcEdTMk5zVlhoV2JFcHJUVmM1TTFrd1ZuTldiVXBWWWtjNVYwMUdWalJVVlZwWFUwZFNObFpzWkZOaE0wSlpWbFJLTkdFeFZYaFhia3BxVW5wR1dGbHNhRk5UUmxwVlVteGFiRkl3TVRWVWJGcGhWR3hLYzJOR1ZsZGlWRVYzVm1wR1ZtVkdiM3BhUms1b1RWWndWVlpYTVRCak1sSlhXa1ZrVm1KdVFtaFVWM2gzVmxaV1dFNVZUbHBXTUZwWldWVm9hMWR0Vm5KT1ZrSmFZVEpTVkZWclduWmxWMUpJWkVaT1RtSlhaM3BXTVZKUFkyMVJkMk16YUdGTk1taFdXVlJHZDFZeGJISlhibVJUVFZad1dWcEljRmRXTURGV1YyeG9WazF1YUZSV01HUlhWMFpXY21OR1pHaE5XRUpWVm14YVlXSnRVWGxTYTJSU1lrWndUMVp0ZEdGTlZsbDNWMnM1YW1KSE9UTlpNR2hEVjBaWmVWVnJNVlpXUlVwb1ZHMTRkMUp0Umtaa1IzaFhUVVJXU2xaRVJtOWtNVkpIVWxob1ZGZEhVbUZXYkdSVFpXeHdXR1JFVWxkV1ZGWlpWako0WVZSc1NuTmpSbFpYWWxSRmQxWnFSbFpsUm05NllVWm9hRTFJUWxoWFYzUldUVmRHVjFSdVJsSmlWR3hZVm0xNGQxTkdWbGhOVjBaWFVtdHdWbGxyV2xkV01rVjNUbGhLV0dFeFdUQlZhMXBIVjBVMVZrNVdaRk5XTTFFeVZtdFdhMlF4Um5SVmJGcE9WbFpLVUZVd1pHOVVSbkJYV2tSQ2FXSklRbmxaVlZKUFdWVXhTVkZyY0ZkV2VrRXhXVlZhYTFKck1WVlJiRnBUVFRGS1NWWnJXbUZWTVVweVQxWmthRkp0ZUU5Vk1HUnZWV3hhVjFWclRsTk5Wa3BYV2tWYVUyRkZNWFJWYms1aFZteGFTRmt5ZUd0VFYwNUdWMnMxVTJKWVkzbFdNVkpQWkRGU2RGTnNXbWxTUmxwV1ZteGFTMlJzYkZoamVrWlBZa1p3V2xsclduZGhWbHBZWkhwR1YxSkZTbkpXVkVwSFVtczFXVkpzWkdsWFJrcFJWMWQ0WVZNeVRrZFZiRnBXWVRKU2IxUlZVbk5XYkdSeFZHNU9XRkl4V2xsV1YzUjNWakpGZUdOR1VsZFdiSEIxV2tSS1IxSXhSbk5YYXpWWFlURnZlRlpxUW1GVU1VWnlUMVphYVZKV1NsZFpWM1JMWWpGV2NWTnFVazlpUmtwSVZsWlNSMWxYU2tkV2FrNVhZbGhvVUZacVNrWmxSbVJ6Vld4b1UxSldjRzlXVm1RMFZqSk5lRlZ1VWxSaE0xSlBWV3BLYjFZeFduUmtSMFpTVFZoQ2VsWkhkR0ZWUmxwelUyeG9WbFpGY0ZSWlZFWlNaVzFLUmxSc1FsZFdNMmhLVjFkMGFtVkdVa2RUV0d4c1VrWndZVnBYZEhkWFJsSldWbXBDVTFKc1duaFZWekZ2VlRBeGRWcDZTbGRTVm5CVFZGWmFkMk14V2xsYVJtUnBVbFJXV1ZkV1VrZFpWbHBIV2tWV1UySlZXbE5aYTFwaFpXeGFTRTFWZEZSTlJFWlhWR3hXYTFZeFdYcGhSMmhXWWxob1dGbDZRVFZXYXpsWFUyeGtWMUpXY0VsV1ZFcDNVbTFSZVZScldtdFNiRXBUV1ZjeFUxTXhWbFZTYTNScFZteEtXRlpYZUU5aFIwWTJWbFJLVjFKdGFIcFdNakZIWTIxS1JWUnNWazVTTVVwUVZrWlNRazFXV2xkVWJsSnBVbTVDYjFsVVNucGtNVmw1WkVkMFUyRjZSbmxVYkZwdlZteGFSbU5IYUZaaGEwcDZWRlJHVTFZeGNFZFRhemxYVmtkNFIxWlVTWGhUTVUxM1RWWmFUMVpYVWxoV2FrNXZZVVpXZEdWR1pHcE5SR3hYVkRGYVMxWXhXa1pYYTJoV1RXNUNSMXBFUm5abFJrWnpWV3hLVjAweFNubFdWM0JMWWpKUmVHRXpjR2hOTWxKTlZGWmthMDVHV2toa1IwWlhZbFZ3U0Zrd1ZtdFdNVmw2V1hwR1YyRnJXa2hXYWtaUFl6RldjMkZIZUZkTlZYQlhWbXhrTkZsV1RYaFhXR2hVWWtkU1ZWbHNXbmRXYkd4VlVXMUdWVTFXV25wV1J6RXdXVlpLVldGNlJsWldNMEo2VlRKNFNtVlhWa2xWYkZKT1VqRktObGRzWTNoVWJWWlhWMjVHVW1FemFGTlVWbFp6VFRGa1YxWnRkR3BOYkZwNVdsVmFWMVF4V1hoalJtUlZWbFp3YUZacldtRmtSMUpIV2taYVRsWXlVVEJXYWtvd1V6RmFkRk5yV2s5V01uaFZXVmQwWVZKR1ZsaGxSMFpUWWxWYVNWWXllR3RWTWtWNlVXdFNWMkV5VVRCV1JFWlRWakZLYzFwR1dtaE5XRUpWVmxaU1MxVXlSWGhVV0doVlltdHdhRlJYZUZwTlZsWlhXa1JDV0ZZeFdubFdiR2hyVjBaa1NWRnVSbUZXTTA0MFdrVmFUMWRYU2taT1ZrNVRUVzFvTkZacll6RmtNVnAwVm14a2FWTkdTbFZXTUdRMFZWWldjVkpyZEdsTlZrb3dXVEJhYTJGRk1VVldha0pYVm5wR2VsWkhlRXRTYkdSMVUyeFdUbFpyY0RGWGJGcGhZVEExVjJORlpGTmlSWEJZV1d0V2QxTXhXWGRWYTJSV1RWWldORlZ0ZUdGVU1WcHpVMnhhVm1KR1dtaFdiWGhYWXpGYWMxTnRiR2xTTW1oV1ZsWmFVMk14VG5OVWExcFBVMGRvV1ZadWNGZFZSbEpXV2tVNWFsSnRPVFZhUldRd1ZUQXhkR0ZFVGxoV1JUVjVXa1JDZW1WR2IzcGhSbFpvVFZoQ1dGZFhkR0ZrTVVsNFYyeG9hMlZzV2xoVVZsWmhWMFpWZVdWR1RsaFNNVnBaVmxkNFMxWnNXbk5qUmxKV1RWWndkVnBWV2xkak1WSnpVMnhrVjFKc2NGZFdiWFJYVmpGSmVGZHNaRlJpUm5CWFZtNXdWMWRzV2xWVWJYUnBZa1pLVjFaSGNFOVpWVEZ5VFZSYVYxWjZWbnBaVnpGTFkyeE9jVk5zY0U1TmJtZ3hWMVpTUzFVeFRraFNhMnhTWWxoQ2MxWnJWa2RsVmxsM1ZXdGtWVTFWY0hwV2JUVlBWMGRGZUdOR1pGcGhNVXA2VmpCYVYxWXhaSEprUm1SVFlsWkZlRll5ZEdGU01WWnpWMjVPVkdFelFsbFZhMVpoVmtaYVZWSnJaRmRoZWxaWVZsZDRWMVV4V2xkalJtUlhWak5vV0ZaWE1VdGpNa1pIVlcxMFRtSldTazFYYkZwVFlqSlNWMVJZYUZWaWEzQlFWRlZrTkZOc1VsWmFSM1JhVm14c05sbFZVbUZYUjBwR1RsVlNXazFHY0ROWk1HUkhVMVpHZEdORk5VNVNSbG8yVmpKMFYxUXlTblJTV0d4V1lUSm9iMVV3Vmt0alZuQlhWV3RLYW1KSFVrWlZiWE0xVlRKS1IxZHVjRmROYmxKb1ZtMHhTMUpYU2tkaFJscFhZa2hDVFZadGRHRmhNRFZYWTBWa1ZtSkZjRTlXYkdoRFZFWmFjMVp0UmxaTldFSjZWVEkxUzJGV1NsVlNiRkpYWWtaS1dGVlVSbUZTTVZwelYyMXNhVkl5YUZaWFZsSlBVVEZPYzFScmJGVmlWRlpWV1ZSR2NrMUdjRlpXVkVaVVVteEtWbFpIY3pGaVIwVjZVVzVrVjFKdFVqTlZWM014VWpKS1JWZHNjR3hoTVhCUVYxZDRWMlF5VGtkVmJHaHFVbnBzYjFSV1pEUldiRmw0Vld0a1dsWnJjRWhaTUdoTFYwWlplbEZyVG1GV1ZuQXpWV3hrUjA1c1ZuSk9WMnhVVWxSVmVGWnRlRk5STVZGNFZsaG9WV0pIVWxOWmExcGhWMnhTVmxkdVpGUk5WbkJIVm0xNGExWlZNVlpYYkdSVlZteGFhRlY2UVhoV1ZrWjBUbFphVTJGNlZrVlhiR040VlRGa1IxUnVWbXBTTTFKVlZXeGtORTFzVlhsa1J6bFdUV3RzTlZWdGVITldWbVJIVTJ4S1dtRXhTbnBXYkZwWFl6RmtjbVJHWkU1V1dFSlpWbFJKZUZsV1dYbFNXR1JZWWtaS1dGWnJWbUZPYkd4MFpVWmFhMDFXU25wV1IzaFRWakpGZDJOR1pGZE5Sa3BFVjFaYVQyTXhWbkpYYkdSb1pXMTRWRlp0ZUZOU01VbDRWRzVHVTFkSFVuRlVWV1EwVW14V1YyRkZPVlJpUlRWSFZHdG9hMWRyTVhGV2EzaGhVa1Z3UzFwWGVGTlhSVGxXWkVaU1UyRXpRWGxXTVZwaFlqRlNkRlZyWkZKaWF6VlJWbTE0UzFaR1duUmtTR1JZVW14YWVsWXlkREJaVjBwSFkwaHNWbUpZYUZCV2JYTjRWMVpTZFZac1pGZFNWWEJSVm14U1IxUXhXWGhTYms1WFlrZDRUMVZ0TlVOVVJscHlWbXhrVjAxV1JqUlZiWGhoVkd4YVYyTkZlRlZXYkVwRVdsZDRUMVpzVW5SalIzUm9UVEJGZUZkV1VrOVJNVlpJVm14YVZGWkdXbFZXYkdSVFpXeHNjMVpxUWxSU01IQktXVEJrZDFSdFNrZGlSRTVXWld0S1VGWlVSbmRqTVZwWldrWmthVkpVVmxsWFZsSkhXVlphUjFkWWNHbFNNMUpZVlcxMFYwNUdWWGxrU0dSWFlrVndlbFV5TUhoV01rcEhZMFY0VmsxdVVqSmFWVlY0VTFaR2NtVkdXazVTVjNRMlZsUkdWMVF4VlhoalNFcE9WbXhhVjFsc2FFTlZSbkJZWXpOb1QxWnRVbGxaTUZaM1lUQXhSV0pGYkZkU2JFcFFWa1JHWVZKdFRrbFJiR2hYVFRCS1RGWkhkR0ZrTVU1SFUyeFdWR0Y2YkZoVVZsWlhUbFpaZVdSSGRGUmlWa1l6VkZaYWIxWnNXa2RYYkVaV1lURmFNMWxXV2s5alZrcHlUMVpPVTJKR2NEVlhWM1JoVWpGWmVGTnVSbWxTYlZKWVZtcE9VMlZXYkhSbFJ6bFhVbXRhVmxsclZuZFdSa3BWVldwU1YwMVhUWGhXUkVGNFUwWlNkVkZ0Ums1aWJFcDVWbGR3UzJJeVVYaGhNM0JvVFRKU1RWUldaR3RPUmxwSVpFZEdWMkpWY0VoWk1GWnJWakZaZWxsNlJsZGhhMXBJVm1wR1QyTXhWbk5oUjNoWFRWVndWMVpzV2xOU01VMTRWRzVPVjJFeVVsZFpiRnAzVjBaYWRHUklaRlJOVlRWNFZXeG9hMkZyTVVobFJWcFdWbTFvVUZVeWVFOVNhelZKV2tad1RtRnNXazFYYTFKTFUyMVdjMVZzYUZCV1dGSlZWVzEwZDAxc1pGZFhiVGxWWWxaS1NGVlhOVTlWUmxwelUyeFNWMkpZVWpOV01GcFhZekZrY21SSFJtbFNia0kxVmxjeE5GUXhXbkpOVm14VllteGFXRlpyVmt0VlJscFZVbXM1VjAxVlducFdiWGh6Vkd4YWMyTkdWbGRXUlZwUVdWUkdkMUp0VmtaVmJFcFhaV3hhVDFkc1dtdFVNbEY0VkZob1ZtSnVRbWhVVjNoM1ZsWldXRTVWVGxwV01GcFpXVlZvUjFkdFJuSk9WbWhoVW0xU1ZGVnJXblpsVjFKSFlrZDRhRTFXV1hwV2FrWnZaREpHZEZadVNrNVhSa3BWVmpCa05GUXhWbkphUnpscVZteEtNVmt3V21GaVJscDBaVVJDVmsxWGFIcFdWVnBLWlVaT2RFOVdWbWxYUlVwWlYxWlNRazFYVWtkV2JsSnBVbFJXVkZWc1duZGxWbHBGVW14T2FXSldXbGRhUlZwVFZXeGFTR0ZGZEZaV1JWcExXa1JHYzFac2NFbFViWGhvVFRKb1YxWkhlR0ZVTVZWNFYyNUtXR0pIVWxkVVZscDNWRVpXZEdWRmRGTk5SR3hZVmpKNFlXRkZNWFZoUmxwV1pXdGFVRlZVUVRCa01rcEdZa1pTYVZkSGFIbFdWRUpoV1ZVMVYySklVbWxTVlhCd1dXdGFWMDB4V25SbFJUbFhUV3RXTkZZeWVGTlhSa3BHVTIxb1ZsWXphRkJXYlRGWFVteGtjMVJzU2s1aGVrSTJWbFJHVjJKdFVYaGlNMnhWWW14S1dGbFhkRXRqYkZsM1ZtNWtUbFpyTlZkV1IzaFBXVmRHTmxKc1dsZFdla1l6VmtSS1YyTnJNVlZXYkdoWFRUQktURmRyVWtKT1ZrNUhWV3hXVldGNmJGaFZiR2hEWkRGWmVGcElaRlJoZWxaSVdUQldiMVV4V2taalJrSlhZV3RhUjFwV1dtdGpiSEJHWTBkMFRsSkZXbHBXYkZwVFZqRldSMU5yV21obGF6VlZWbXhrYTAweFpIRlNibVJyVm14d01WWnRlSGRVYXpGV1kwUk9XRll6UWt0VVZWcDJaVlpXZFZWc1RtbGhlbFoyVm0xd1IxTXlTWGhqUlZwaFVteHdjRlJWYUVOVFJsRjNWV3QwVmxKcmJEUlpNR2hIVjBkS1NGVnNaRlZXYkhBelZqQmFZV1JIUmtkalJtUlRUVVJTTmxaclVrZFZNVnAwVm14a2FFMHllRlJXYTFVeFlVWmFjVkZVUm10U2JFWTBWbGN4UjJGSFNrbFJha0pXWWxSRk1GZFdXbHBsUms1MVVteG9WMkpGV1RCWFYzaGhZekZrU0ZacmJHcFNNRnBYVkZSS1UyUldWWGxrUm5CUFVqRmFSMVJXV205Vk1WcEdWMnhDWVZZelVucFViRnBUVm14V2RHUkhhRmRXUlZvMFZteGpkMlZHWkhSU2JrNVhWa1ZLVmxaclZuZFZNVkpZWlVoa2FsWnRVakJaTUZwRFZURkplbFJxVGxkU2VrSTBWbFJLUjJNeVRrZFdiSEJzWVRCd2FGZFdaSGRTTWxKSFdrWmtZVkpHU25OWmEyaERWbFp3UlZOdGRGUk5WWEI0V1d0b1MxWldXalpTYXpsVlZsWldNMXBXV2t0V1ZsSjBVbTFvYVZKdVFqVldhMUpIVlRGT2RGWnJXazVXYldoVVZtdFdZVlF4V25KWGJVWnBUVlpLV2xrd1dtdGhSbHBWVm14c1ZtSlVRalJXVlZwYVpVWktjVmRzYUZkaVJYQnZWMVpXVm1WRk5YSk5WV2hwVWxoQ2IxWXdaRk5rVmxWNVpFWndUMVl3V25wWk1GcHZWa1phUjFkck9WWmhNbEpQV2tSR1VtVkdjRWRUYlhST1VrWmFORlpyV205ak1XeFlVbTVTV2sweVVsbFpWRVpMVlRGd1JWRlVSbXRTYkZwYVdWVlZNV0pIU2xsVWFrNVhUVmRTTTFVeWMzaGphelZYVm14b1YxSnNjR2hYVm1SM1VUSk9SMVJzYUdsU1JUVm9WRlZvUTFOR1VYaGFSRUpZWWxWYU1GZFljRU5XVlRGWVZXeG9XbFpGUmpSVk1GcFRWbFpPYzFGc1RsTldNMk40Vm10U1IxVXhUWGxTV0dSUFZtMW9XVll3Wkc5WlZuQllaRVphYkdKR1JqUlhhMXBMVkcxR05sWnVhRlpXYkVwRVZqSXhTMVpzV2xsalJsWllVbnByZWxkV1dsWk9Wa3BYVW14b2FWSllhRmRVVlZaeVpXeFZlRlpyT1ZaTlJFWkpWVzEwYjJGV1RrbFJhelZYWVRGS1dGbHNXbXRXVms1MFQxZHNVMkpZVVRGWGExWnJXVmRHY2sxWVRsaGlhMXBvVlcweGIxUkdiSEpXYWtKVFVqQlpNbGRyVm5kVmF6RldZMGhTVjFKc1dsUldWRXBIVm1zeFZWZHNUbGhUUlVwUlYyeGtNRll3TlVkVmJsWnFVbFUxY0Zac1VsZFNiR3hWVkcwNVdHRjZSbmxXTWpBMVYwZEtWVkpzVGxWaE1WWTBXa1ZhVjFkWFJrWk9WVFZvVFZacmQxWnJVa2RWTWtweVRWVmthVkp0YUZSV2FrcFRWV3hhVlZGclpHdGlSVFZZVmtkNFQxbFhSalpXYm1oYVZsZE9ORll5YzNoak1XUjFWR3hXYVZJeFNsbFhWM1JoWXpGa1IxTnNWbFZoZWxaVVZXcE9UMDVHV2tkWk0yaFZUV3RhUjFScmFITldNa3BaVVcxb1dsWjZSalphVmxwclZsWk9kRkp0YUZOaWEwcGFWbTB3ZUUxR1pISk5XRXBYWW0xU1ZWWnNXa1pOUm1SeFVtdGtWRkp0VWpGVlZ6RnpWVEF4VjJOSVVsZE5ia0pNVm1wQmVGSXhiM3BpUmxacFlraENkMWRYTVRSVE1rMTRZa2hTVDFack5YTlpWRTVUVWxaYVdHTkZUbWhTYTJ3MVdsVlNZVlpXU25OU1dHaFlZbGhvVkZWdE1VdFNiRlp6Vkd4a1YxSnNjRmRXYkdRMFYyczFWMVpzWkZOaVIxSlhXVlJLTkZSV1dsVlJhMXBPWWtVMVYxWkhlRTlaVjBZMlZtNW9XbFpYVGpSV01uTjRZekZrZFZSc1ZtbFNNVXBaVjFkMFlXTXhaRWRUYkZaVllYcFdWRlZxVGs5T1JscEhXVE5vVlUxcldrZFVhMmh6VmpKS1dWRnRhRnBXZWtZMldsWmFhMVpXVG5SU2JXaFRZbXRLV2xadE1IaE5SbVJ5VFZoS1YxWkZOVlZXYkdSVFpXeHNjMVpxUWxSV2JFcDRWVmN4ZDJGV1pFaGhTSEJZVm5wR2VsbHRNVVpsUjBaRlYyeEtWMUpWY0doWFZtUjZaVVUxUjFWc2JHcFNNMEp6Vld4U1IxWnNaRlZVYlhSYVZqQmFlbFZzVWtkV1ZscDBWV3hDV2xaV2NIcFdNRnByWkVkU1IxRnNUbE5YUlVvMVZtdGFZVlV4VVhsU2ExcE9WbXhhYjFwWGVFdFZSbFp4VVcxR2FVMVZNVFJXVmxKRFlUQXhTVlZzVmxaV00wSnlWVEo0Um1WR1RuUk5WbFpPVm10d01sZFhkRlpOVm1SSFZHNVNhMUpVVmxoVmFrcHZaVVpaZVUxSWFGWk5hMXBIVkZaV1YxZEhTbGhsUlRsV1lURmFXRlJyV2xOWFJURlhZMFU1VTFaR1dsZFdiRnBUVWpGa2NrMVlTbWhOTWxKV1ZqQm9RMk5zYkhOV1ZFWlhWakJXTlZkcldrZFdhekZHVjI1c1dHRXhXbkpaYWtwUFUwWlNjVlpyTlZKTk1VcGhWa1pTUjFsVk1WZGpSVlpWWVROU2IxVnFRVEZUUmxGNFlVVTVhRkpzYkROVWJHaFBWMjFLVlZac1FscGhNVmwzVld0YVYyUkdaSEpPVms1VFlUTkNNMVpyV205a01VcDBWbTVLVDFaR2NGUldNR1J2VlVad1dHUkZkR3RTYkVwNVZsYzFTMkpHU25Sa1JGWldZbFJHZGxkV1pFdFdNVXBWVVd4V1YyVnJXbFJYYkZaV1pESldWMU5zYkdoU2EwcFlWV3BLVDAweFdYaFhiWFJUWWxVMVIxUXhVbGRWYlVweVUyMW9XbFp0VW5aYVJFWnpUbXhLVlZadGFGTk5SRlY0VmxSSmVHSXlTa2RXV0d4aFUwVndXVlV3YUVObFZsSnlWMjVrVjFac2NEQlphMlJIVlRGS1YxWllaRmROVmtwTVYxWmtSbVZIU2tkV2JFcFhVbGhDYUZkV1pEQlNNRFZIVld4a1ZtRXpVbkJXYkZKelVteGFjMVZyVGxWTlZtd3pWR3hvUTFaWFJYaFRhemxWVmtWYU0xa3hXbUZXVmxweVpVWmFUbUpzU2pGV01uaHZZekZGZVZSclpHcFRSVXBvVkZjMVUxZHNjRmhOV0hCT1VtMVNlbFpYZUd0aFJscDFVV3RhVm1KR1NsUldNbk40WXpKT1NWTnNhRmRpUlhCRVZrWmtOR015VGxkU2JHeG9VbFJXV0ZWc2FFTk5SbHBGVVd4T1YyRjZSa2RVYkZwdlZsZEtXR1ZHUWxaaE1WWXpXbGQ0YTJSSFRrZFhhemxYWWxaRmVGWXlkRmRrTVZWNFVsaHNWbUpZVWxWV2JGVXhVakZSZUZadVRsUlNWRVpaV2tWVk5WWnJNWFJWYm14WVlURmFjbGxxU2s5VFJsSnhWbXMxVWsweFNsWldiWGhoVWpBMVIxUllhRlZpYTNCb1ZGZDRXazFXVmxkYVJFSllWakZhTUZremNFTlhSMHBIVTJ4b1dsWnNjRE5WYkZwTFZsWldjMk5GTldsVFJVbzFWbXBHWVZVeFJuSk5XRTVwVTBWYVUxWXdaRzlVTVZweVZtNWthMUpzUmpOV1YzaGhWR3hLVlZac2JGZFNla1o2VmtSR1MxSnJNVWxqUm1ocFYwVktXRlpIZUdGaE1EVlhZMFZrVldKRk5WaFpXSEJYVjBaYWNsWnRSbFppVlhCNldWVmFVMVZzV2tobFJYUldWa1Z3VkZWc1dtRlNWa3B5WkVaYVRsWnVRbGxXVm1RMFZqRk5lVlp1VmxWaVZGWm9XV3RWTVZKR2EzZFhibVJxVW0wNU5WcEZaREJWTURGMFlVUk9XRlpGTlhsYVJFSjZaVVprYzFwR1ZtaE5XRUpoVmtaYVlWTXhUWGhYYTJSWFlrWndjVlZzWkRSVGJHdzJVMjEwYUZKc2JEUlphMmhoVmtkRmVHRjZRbFZpUmxVeFZUQmFZVlpXU25OalIyeFhZVEZyZDFaclVrTmhNVkY1VTJ4a2FsSlhhRlJXTUdSVFZVWnNjMVp1VGs1TlZrcFlWbGQwWVdKR1duVlJibWhZWW01Q1NGWkVSa3RTTVdSMVVteG9WMDB3U2xSWGJHUjZUVWRXVjFwR1ZsTmlSVXBZV1cxek1VMVdXbGhrUm1SVFRWWndXRlV5ZUZOWlZrbDRVMnhzWVZadFVsUldiRnBoWTJ4YWNscEdXazVXYmtKR1ZqSjBhMVV4VG5OVGExWldZbFJXYUZWc1pGTmxiSEJHVjI1a1YxSnRPVFpWVjNRMFlrWmFjbUpFVGxoV2JGcHlXWHBLVjJOdFZrZFdhemxYWWtWd1dWWlhlRmRaVmxwSFYyNUtXRlpHV2xSV2JYTXhWakZaZUdGRlRsUmlSVFZLVmtjd01WWkhSWGhoZWtKVllrWlZNVlV3V21GV1ZrcHpZMGRzVjJFeGEzZFdhMUpEWVRGUmVWTnNaR3BTVjJoVVZqQmtVMVZHYkhOV2JrNU9UVlpLV0ZaWGRHRmlSbHAxVVc1b1dHSnVRa2hXUkVaTFVqRmtkVkpzYUZkTk1FcFVWMnhrZWsxSFZsZGFSbFpUWWtWS1dGbHRjekZOVmxweldrUkNWMDFXY0VoV01uaGhZa1pLYzFkcmVGVldiRXBFV1cxNFYxSXhVbkpUYld4cFVtNUNTRlpHV2xka01WcFlVMnRrV0dKR1dsVlpiVFZEVG14a2NWTnRSbGRTYTFveFZWY3hSMkZHV1hsVmJteFhUVWRvTTFreWN6RlNNazVIVm14a2FWWXphRzlXVjNSWFZtc3hSMXBHVmxSaVZWcHZWRlprTkZac1ZsZFZhM1JZWWxWYWVWVnRjRk5XVmxwelUydDRXbUpHVlRGVmJGcGhWbFpHY2s5V1pFNVNSbG96Vm10a01GVXhVbkpOU0docVUwVmFXRlpyV21GWFZuQlhXa1pPVTJKR1dsaFdNbmhQVlRKRmVVOVVVbFZXYlZKTVZYcEJlRkl4WkhOUmJGcG9UVVJXZVZZeWRGZE9SbVJYVm01V1VtSlhlRmhVVmxwaFRXeFdObEpyT1ZKaGVteEhXV3RXVjFWc1dYbFZhM2hhVm14d2VsbHRlRTlqYkdSVlZXczVWMVpIZUVwV2JYaFRVakZrZEZOc1pGTmhiRXBXVkZWa1UxVkdiSE5YYm1SVVVtdHdXbGRyVlRWaFZscFlaRE53VjFKc2NGUlZiVEZYVmpKT1NWSnRSbXhoTVhCUlZsZDBZVmxYVGxkYVJtaHFVbXR3YzFsWWNGTk9WbGw0Vld0a1ZsSnNjREZXUnpWWFZtMUZlRmRyYUZkaVJuQk1WbXRhZDFOR1ZuTmhSM2hYVFZWd1YxWnRlRmRXTVVsNFZWaGthVTB5YUU5VmFrcFRVekZhY2xWclRtbGlSVFY0VlZaU1IxVXlTa2RqU0d4WFlsaG9VRlY2U2xkWFIxSklUbGRHV0ZJemFFUlhWbEpIWWpBMWRGSnFXbFppVlZwWVZXMTRkMlF4V1hsa1JrNVRZWHBXU0ZsVVRuTlhSMHBaVlcxR1YyRXhXa2RhVmxwclYwZE9SbE50ZUZOV1JWcFhWbFJKZDJWR1ZrZFRhMlJYVjBkU1ZsbHJaRk5WUm14WFZsUkdVMVpzU2xaV1J6RkhZVWRLUjFaWWFGZGhhelY2V1ZSR1ZtVkdUbk5hUmxacFVtNUNWMVpYTVRSU01sSlhXa1ZrVldFd2NGRldiR1EwVWxaa2NsWnRSbGhTYTNCNVZUSjBNRll4V1hwVmJHaFdZa1phTTFSdE1VNWxWbkJJVFZaYVRsSldjRFZXYWtKdlpESk9jazVWWkdwU2JGcFlXV3hrTkdGR1ZuSldiRnBPVW0xU1ZsVXlNVWRoUlRGWVpVWmFWbFpzU2t4V01qRkhZMnhLY1ZWc1ZsZGlSWEJOVjFkNFZrNVdTbGRYYkZaU1lYcHNXRlJWVWxka01WcElaRVpPVldGNlFqUlpNR2hIVmpGYVIxZHNiR0ZXYlZKVVZXMTRWMVl4WkhOVWJFNW9UV3ByTUZaR1dtdFRNVTEzVFZWb2FGSnRVbGhWYlhoaFUwWmFSVkZ1V214U1ZFWlpWVEowTUZSc1dsVldiR1JYVm14d2FGVjZSbUZXYlVsNllVVTFVMDFzU2xOV2JGSkRVekpPYzFwR1pHaFNhelZ3Vld4b1UxSldXbGhqUlU1b1VtdHNOVnBWVW1GV1ZrcHpVbGhvVm1KR2NFaFdha1pYWTJ4a2MySkZOVmRXUmxwWVZtMTRhMDFIVFhoVldHaFVZV3hhY2xSWE1WTlVSbFowWTBjMVRsWnNSak5YYTFwaFZHeGFkR1ZFUWxkV2JXaDJWbFZhU21Rd05WbFZiR2hvVFd4S1NGZHJVa0pOVjFKSFZHeHNZVkpVVmxoVmJGcGFUVlpaZVUxWVpHbGhla1pYVkd4V1YxWXlTbGxSYlVaYVZqTm9TRlJ0ZUZOalZrNXpZMFUxVjFaSGVGbFhXSEJLVFZaVmVGTnNXbGhpUm5CWFdXdFZNV05zWkhKWGJYUlBWbTVDU0ZaWGVHdFZNVnBYWTBaV1YySllVbEJaVkVaM1VtMVNSMVp0Y0U1aVZrcE5WbGN4ZDJKck1WZFZXR1JoVW14d1QxWnRNVFJOUmxwWFlVYzVWbEpyYkROVWJHaFRWMGRGZVZWclpHRlNSVVY0V2tWYVQxZFdjRVpPVm1SVFZteHJlRlpxU1hoa01rcHlUVlphVDFaV1dsaFpiR2hEV1Zac1dHVkZaRTlpUmtwNFZUSjRkMVJzV2xWaVJtaGFaV3RyZUZaVVJrdFdiR1J6VjJ4YWFWSlVWbmxXTW5SaFlUQTFWMk5GV21sU2JWSllWbXRXWVZKR1duSmFTRTVvVFZoQ1NGZHJVbGRaVmtwWFkwWmFXbFpGV2toYVJscHJVakZTY2xOc1FsZFdNMmhLVm14amVHSXlSWGhUV0doWFlteHdWVmxVU205V1JteHhVMnRrV0Zac1NscFdWM2hIWVVVeFZtTkZVbGRpV0ZKWVZtcEdkMk14V2xsaFJscHBVbFJXVmxadGVGTldNVTVYVld0YVZXRXdjRzlVVm1SdVRXeHNXV05HVGxwV2JIQklWakkxUTFkSFJYaFRhMlJWWVRGd2VWcFdXbXRrUjFKSFkwWmtVMVpXV1RGV2FrWnJaREZHZEZacldrNVdiRnBWV1d4U1IxVldWbkpYYkZwclRWWktlbGRyVlRWaFJscFZWbXRhVjFKc1NsQlhWbVJIWXpGYVZWSnNaRTVOYm1oNVZsZDRZVkl4V1hoV2JrcFlZVE5TVDFaclZtRmpSbFY1WTBWT1YwMVdSalJWTW5SVFdWWkplRk5yTVZkaE1taFFXVzE0ZDJNeFVuSlViWEJUWW10S00xWXljRXROUjBWNFUxaHNhRk5IVW1GVVZFb3dUVEZPTmxKdFJsZE5Wa3A1VmpKNGMxUnNXbFZXYTJoWFlrZFJNRmRXV2t0ak1WcDFVVzFvVG1KV1NucFhiRnBYVWpKT2MxcEZiR3BTYTNCUFZteFNSMlZHVmxoTlZFSlZZWHBHZVZZeU5VZFhSbVJKVVc1V1lWSkZXak5XYkZwTFYxZE9TRkpzWkU1VFJVbzJWbXBHWVdFeFduUlZXR2hwVWtad1ZsWnJWVEZoUm14WVpVVjBhbEpzU25wV1YzUkxWR3N4UldKRldscFdSVFY2VlRKNFMxSldSblJPVmxKb1RXMW9WVmRYY0V0U01XUlhWV3hzVm1KRlduQlZhMlEwWlVaa1dHTkZjR3hTTVVZMFdXdGFjMVpIU2xsaFJuQlZWak5vVEZSWGVITmpNWEJHV2tkd1UwMUlRak5XTW5CTFRVZEZlRk5ZYkdoVFIxSmhWRlJLTUUweFRqWlNiVFZzVW14S2VWWXllR0ZoVmtwMVVXdG9WMkpIVVhwVWJGcFBZekZXZFZOc2FHbFNWWEJhVjJ4YWExVXhUbk5YYmtwWVlrVTFWMVp0TVd0Tk1XeFdWMnRPVjJGNlJsaFZiVFZYVjBaS2NrNUljRmhoYTBvelZXcEJOVkpXV25OUmJFNU9WbXhaTUZacVJtcGxSbFowVm10YVVGWlhhRlpaYkZKSFlVWldjVkZzWkU1TlZrb3dWRlpXZDJFd01VVlNiRnBXWWtkb2VsZFdaRWRrUm10NllVWldhRTFWY0ZsWFZtUTBZekpPVjFac2JHcFNWR3hQV1d0a01FNUdXa1ZTYlVac1lsVndlbFpzYUd0V01rcEdUbFpvV2xaRldtaFdhMXBQWTFaS1dXRkdjR2hOYW10NlZteGtORkV4V2xkWGJGcFlZVE5TV0ZWcVNqUmpiR1J5Vm1wQ1YxWXdNVFZYYTJSdlZqQXhXR1ZFU2xaTlZuQlFWbFJHZDJOck5WWldiR1JZVWpOb1VGWlhjRWRTTURWeldrWmtZVkpVYkc5WldIQnpVbXhXV0UxVVVsVmlSbkJIVkd4b1QxZEdXalpTYkdoYVZsWndNMVpzV2tka1IwNUdUbGQ0YVZacmIzZFdhMlF3WVRGT2NrMVdXazVXVmxwaFdsZDRTMVZXV25KV2JrNXJUVlUxVjFsVmFIZFpWVEZKVVd0b1ZVMUdTbGhXVlZwS1pVWmFXV0ZHYUZkbGExcFVWMnhXVms1V1RrZFZibEpPVmpCYVZGUlZXbHBsYkZwSVRVaG9WR0pXUmpOVVZscFhWVEZrU0dWSGFGcFdla1p4V2xWYVUyTnNWbk5hUjJocFVqTm9ORlpzV205a01WRjNUVmhPYUUweWFGWlVWbHAzVG14c2RHVkdaR3BpUm5CNlZsZDRhMVl4WkVoaFJtUldUVzVDUjFwRVJuWmxSa1p6Vld4S1YyVnNXbFpXYlhodllqRlNjMVp1VGxkaVdGSlRXV3RhUzFKV1pGbGpSM1JVWWtVMVJsVlhNREZXUjBWNFlYcEdXbFpXVlhoVk1GcFhWbFpPZEZKc1pGTldSbGwzVm10YVYxVXhiRmhTV0dST1YwWktWVll3WkRSWlZsSllaRWRHYTFKc1NsaFdWM1JoVkd4YVZXSkdXbFpXZWtVd1YxWmtSMk14VG5WVGJGWlhZa1Z3V1ZkV1dsWk9Wa3BYV2toU2FWSlVWbGRVVlZaV1RWWlZlRlpyT1ZaTlJFWkpWVzEwYjJGV1RrbFJhelZYWVRGS1dGVlVSbUZTYkZweFZXeGFVMkpIZHpCV1JFWldaVVphVmsxVldrOVdWVFZZVld4Vk1WRXhiSE5XYm1ScVVtdGFXVlF4Wkc5V01sWnpWMjVTVjAxV2NIWlZla3BYVmpKS1IySkhhRTVoYlhoTlYyeGtNRll3TlZkVmJsWm9aV3RLY2xSVmFHOWxSbFpYWVVaa1ZXSkdWalZXUnpWM1ZrWmFWazVXVWxoaVdFMHhWbXhrUjFOSFZrWlBWbVJPVTBWS05WWnJXbUZWTWtsNVVtNU9hbE5HU2xkWmJHUnZWREZXY2xkdVpHcFNiRXBYVmxkMFlXSkdTbFZTYWtKWFRWWktWRlpFUm1GU01VcFpZVVpvVjFKWVFreFdSbFpXWlVVMWMyTkZhRTVXVkd4WVZXcE9iMk5HVlhsalJXUlZUVlZ3ZWxadE5VOVhSMFY0WTBaa1dsWnRVbFJaVkVaYVpXMUtTR1JHVW1sU2JIQkdWakowYTFVeFVrZFdXR1JVVmtaS2FGbFVRVEZSTVd4VlVtMDVUMkpWV1RKV1Z6RkhWakZLYzJOSVpGZE5ibEpVVlcxek1WSXlSWHBpUm1ocFYwWkthRlp0ZEZkU2JWWlhXa1pvYWxKVmNITlZiRkpIVm14VmVVMUlhRlpTYTNCSVZteG9hMVpYU2toVmJFSmFWbXhWZUZWc1dsTldWbEowVW0xb2FWSnNWalJXYlhCUFl6SkZlRlpzWkZOaVIxSlhXVlJLTkZSR1VsZFZhMlJvVm1zMWVGVnRjelZWTWtwSFYyNXdWMDF1VW1oV2JURkxVbGRLUmxSc1dtaE5WbkJWVm14U1EyUnRWa1pOVldoaFVtdGFXRlZyVmt0a1ZsVjVUbGhrVTJKV1dsZFViRkpYVkRGT1NGVnJOVnBXTTFKSVZGWmFVMVl4VW5SalIwWk9Za2hDUzFkclVrdGhNVTE0VTI1R1lXVnJXbFpVVldSVFZqRlNWMWR1VG10U2JGcGFXVlZhUTFVd01VVldha0pYVFc1U2NsVnRNVkprTURWWlZXeFNXRkl4U2xCV2JYUlhWakExVjFwSVVtcFNlbFpQVm14U1YxSnNXblJOV0dSWVlsVmFlbFZ0Y0dGV1YwWnlZMGRHVlZac1ZURldha3BPWlZVMVYxZHNUbGRXYmtKWVZteFNRMVF5UlhoalJXUmhVa1phYUZWc1pEUlhSbFowWlVWMFZtSkhVa1pWVnpBMVZteEtjMVpxVWxkV2JVMTRWakZhVm1ReFNsVldiRnBUWVhwV1JGZFhNWHBsUmxwWFZHeFdWV0Y2Um05WlZFSmFaVVphUjFack5VNVNNVnBIV1RCU1YyRkhWblJWYTNSV1lXdHZNRnBGV2s1a01WSnlWMjFvVGxZeVVURldWM2hUVVRGc1YxTnJaR3BUUlRWV1ZtdFdkMWxXY0VWUlZFWnJVbXhhV2xsclduZGhSMFY2VVc1b1YwMVdjSEpXTWpGWFVtc3hWMVpzWkZkU2JIQlFWbGR3UjFsWFVrZFZia3BoVW10d2MxVnNVbGRYVmxWNFZXeE9WVTFyY0ZkWmExSlRWa1V4Vms1VlVsVmhhMHA2Vld0YVYyUkdaSE5SYkdSVFRXMW9ObFpyWkRSaE1VMTVVbGhrVGxac1dtOVZhazVEWVVac2MxZHJkR2xOVmtwWFZsY3hSMkZHV2xWU2ExcFdZa2RvZGxaSE1VdFdNa1kyVVd4V2FWSnJjRlJXUmxwaFkyMVdWMVJzVmxKaGVsWnpXV3hhUzAxR1draGxSazVxVFZkNGVWbHFUbTlXUjBWNFkwWmtWVlpzY0doV1IzaGhZMnhTZEdSSFJsTldNMmhIVmtaV2EyRXhUWGROVldoc1VsUldXRlZzV21GWFJsVjNWMnRrVjJKV1drbFdNbmhYVlRGYVNHVkZXbGRXYkhCWVZGUktTMk5yT1ZWV2JFcG9ZbGhvVEZaVVFsTlJNa3B6WWtaa1lWSnVRbWhVVldoVFUxWnNjbUZJWkdoaGVrWjZWakZvYTFaRk1VWk9WbEpZWWxoTk1WWnNaRWRUUjFaR1QxWmtUbE5GU2pWV2ExcGhWVEpKZVZKdVRtcFRSa3BYV1d4a2IxUXhWbkpYYm1ScVVteEtWMVpYZEdGaVJrcFZVbXBDVjAxV1NsUldSRVpoVWpGS1dXRkdhRmRTV0VKTVZrWldWbVZGTlhOalJXaE9WbFJzV0ZWcVRtOWpSbFY1WTBWT1ZrMVZXbnBXTW5SaFZURmFObFpzY0ZkaVZGWlFXa1phZDFKdFJrbFViWFJPVjBWS1ZsWXlkR3RWTVZKSFZsaHNhMUo2Vm1oV01HUTBVa1pyZDFkdVpHcFNhMXBaVkRGV01GVXlSblJaTTJoWFVrVktjbFp0YzNoV01rcEpWV3hhV0ZJeWFGSldWM0JDVFZkU1IxcElTbUZTVm5CeVZGVlNWMDFHVlhoaFIzUlZZa1p3UjFadGNGZFhSMHBaVVc1V1ZWWnNWWGhWYkZwaFpFZE9SMk5IYUdsU1ZtdDVWbXRrZDFNeFpISk5WbHBRVm0xU2NWUlhjRmRXUmxaelZtMUdWMkpHV2xoV1J6RXdXVlpLZEZWVVJsaGhNVXBFV1d0YWExSnNUblZVYkZKb1lURlplbFl5Y0VkUk1WcFdUVlZvWVZKWVVrOVVWbFoyVFZaa1YxZHRkRk5OYXpFeldUQlNWMVZzV2paU2EzaGFWbXhhU0ZreWVHdFRWMDVKVTJzNVUySnJTbGRXYlRCNFl6RnNWMU5yV2xkV1JVcFpWbXRXZDJGR2JGVlNiazVYVm10YVZsVXllSGRoUjBWM1YxUkNWMUpzY0ZSVmVrcExWbXM1Vmxac1pGZFNWWEJSVm0xd1FrMVhUa2RWYmtwV1lYcFdUMVJXYUVObFJscHpWV3hrV0ZJeFdsbFdWM2hUVm0xS1IyTkdRbGRpV0doVVZXcEdWMWRGTlZkaVJscE9VbFpWZUZac1ZtRlVNVVowVTI1T1ZXSkdjSE5WYkZKSFZrWmFjMXBHVGxKTlZuQkhWa2N4ZDJGc1NsaGxSWEJhWld0d2NsVjZSa3RqVm5BMlVteFdUbEl4U2xoV1JscGhZekpTUjFac2JHaFNhMHBVVkZWU1YwMUdXWGxrUjNSVFlsWkdNMVJzYUZOV1JtUklWV3M1VjJFeFdsaFViRnByWkVkT1NFNVZOVmRXUmxwSFZtMHdlR1F4WkhSU2JrNVRZV3h3VmxsWGRIZFpWbEpYVmxSV1YwMXJNVFZVYkZwaFlVVXhWMk5HV2xkaVdHaFlWR3RhWVZadFNYcGhSVFZUVFd4S1UxWnNVa05TTWxKWFYydFdVbUp1UW5CWldIQnlUVlpXV0dOSVRsUmlSVFZHVlZjd01WZHNXblJWYlVaYVlXdEtlbFl3WkV0VFYwNUlZMFUxYVZKdGQzcFdXSEJEVkRGVmVHTklTbEJXYkZwdlZXcE9iMVZHV25GUmJtUnFZa1pLV0ZaWE1EVmhSMHBKVVdwQ1YxWjZSblpXUjNoTFVqSk9TVkZzVmxkV2EzQklWMnhXVm1WSFVrZGFSbFpXWVhwc1dGVnRkRmRPUmxsNFZXdDBWR0Y2UmtkVVZsSmhXVlpLTmxKc1FsZGhNbEV3V1ZaYVQyTldTbkprUms1cFVteFpNRlp0TVhwbFJsbDRVbGhzVm1KWVVsVlVWbFV4WlZaa2NWTnNaRTlXYTFveFZWY3hSMkZHV1hsVmJteFhUVWRvTTFWdE1WZFNNa3BIVm14a1YxSlVWbEJYVm1Rd1l6QXdlRlZ1UmxSaE0wSnpWbXhTVjFOV1dYbE5XRTVWVFZad1NWZHJVbUZYUjBWNFUyMW9XbUpHVlhoYVJWcFRWbFpXYzFGc1pGTmhNVmt4Vm1wS01HRXhVWGxUYTFwUFZrWndWMWxzWkRSVVZscFZVV3R3VGsxVk5WZFdSM2hQV1ZkR05sSnFRbFpOVmtwWVZqSjRXbVZHU2xsaVJsWlhZbFpLV1ZkWGVHRmtNVXBYVjI1U1RsWlVWbk5aYkZwTFRVWmFTR1ZIZEZaaGVrWkhWRlpXVjFsWFZuSmpSMmhhWWtaVmVGa3hXbXRqYkZaeVUyczFhR1ZzV2tkV2FrWnZaREZrY2sxWVNrNVdlbFpYVlcxek1WSkdiRlphUlRsclZtczFNRmxWWkRSV2F6RjBWV3BPVjFKRk5YcFZWekZHWlVkR1JWZHNVbWxXTTJoU1ZtMXdRMWxYVG5OVmJsSnFVbGRTY0ZWdE5VTk5SbHBYVld0a1dsWXdXbmxVVldoM1YwZEtXVkZzYUZwV1JVVjRWV3hhUjFaV1ZuSlBWMnhYWW10S05GWnFSbE5UTVZaMFZWaGtUMWRGV2xkV2ExWjNWREZTV0dONlJtcFdiR3cyV1d0a01GWldXbkpPVm1SWFVqTlNhRlpzWkV0U2F6VldXa1pvVTFKVmNGVldWbVEwV1ZaS2MxTnNhRTlXYlhoWFZGVldWazFXVlhoV2F6bFdUVmhDZVZReFdsZGhSa2w2WVVaQ1YyRnJTak5aTW5oVFZqRldkRTlYYUdsVFJVbDNWbXhqZUdJeFVuTlRhMlJxVTBWS1ZsWnNXa3RTTVhCV1ZsaG9hMUp0VWxaV1YzTTFWakZLY2xacVVsZE5Wa3BNVlRKemVGSnJNVlZYYlVaVFpXdGFVVlp0ZEd0bGF6QjRWR3hhVldKRk5XaFpXSEJIVFVaVmVGVnNaRmhpUm13MFZXeG9jMVpXV25SVmJHaGFZa1p3TTFWc1dtRmtSVEZXVGxkNGFWWnJiM2RXYTJRMFlURldjazFWV2s1V1ZscG9XbGQwZDJGR2JITldWRVpxVm0xU2VWWlhkRXRVYlVZMlZtdGFWMDFYYUROV01uTjRZMnMxV0dKR1VtaGhNR3QzVmxSS05GSnRVWGhYYmtwUVZteHdUMVZ0ZUhka1JscFlaRVprVTAxV2NGaFZiWGhUV1ZaSmVGTnNiR0ZXYlZKVVZrWmFWMk14WkhWVGJXeHBVakpvVmxaV1dsTmpNVTV6VTJwYVUySnJjRlpaYTFVeFpGWnNWVkp0T1U5aVJWcFdWVmQ0ZDJGSFJqWlNWRUpYVW0xb00xbFhNVmRTYXpGWFZteHdUazFzU205WFZtUTBVbXN4VjFWc1pHRlNWR3h2VlcweE5GZFdXWGxOVkVKV1VtdHdSMWt3YUV0V1ZscHpVMnhDV2xaV1ZqUldiR1JIVG14V2NrOVdUazVTYmtJeVZsaHdSMVV5Vm5OaU0yUnFVbGRTVVZWcldtRlZWbFp4VW14YWJGSnRVbGxVVmxwTFlrWktWV0pGYkZkU2VrSTBWMVphU21ReFduRlViRlpwVmtWYVRGZHJVa0psUmxwWFUyeHNhVkl3V205WmJHUlBUa1phU0dSR1RsZE5hMXA2V1d0b1IxWnNaRWxSYkVKVlZqTm9lVnBWV2xKbFJtUjFZMGRzYVZKc2NEVldiVEUwVlRGWmVGZHNiR2hTYkhCVldWZDBWMDB4WkhGU2EwNVhVbXRhV1ZwRlpEQlZNREYwWVVST1dGWkZOWGxhUkVKNlpVWnZlbUpHVm1sV01taDNWbGR3VDJJeVNsZGlSbHBhWld4YWNsVnROVU5XVm1SeFUycENXRll4V25sWk1HaERWbFV4V0ZWcmFGcFdSVVY0V1RGYVMyUkhWa2hTYld4WFlURlpNRlpxU1hoa01WSnlUVWhvYWxORldsaFpiR2hUVlVaV2NsWnJXazVTYkVvd1ZGWmtSMkZIU2toa1JGWlhWbTFvY2xaRVNrZGpNVXBaWWtaV1YxSllRbEZYVm1Rd1RrWktSMUpzYUd0U2JYaFBXV3RXV2sxV1dYaGhTR1JXWWxaYWVsbHJXbGRaVmtvMlVteENWMkZyV2tkVVZscFRWMGRPUmxkdGVGTmlXR2hYVm0xNGIySXhVWGhYV0dSWFlXeHdWbGxyWkZOVE1WSlhWMjVPV0ZKdFVsWldiVEZIVlRGS1ZWWnVXbGRTZWtJMFZXMHhWMk50VmtaVmJFcFhUVEZLWVZaR1pIcE5WMDE0V2tab2FsTkZjSEpVVlZKV1RXeGFWMVZzWkZwV2EzQkhWV3hvYzFaV1pFbFJhM2hhWWtaVk1WVnNXbGRrUjFKR1QxWk9VMVpXV1RGV2Frb3dWVEZLZEZadVNsQldiRnBYV1d4a05GUXhiRmhsU0Vwc1VteEtNRmt3YUU5aFJscFpZVVZXVmxadFVYZFdNVlY0WXpGT2RWRnNWazVTYTNBeFZrZDRZV1F4WkVkV2JHeGhVbTVDYzFsclpIcGtNVnBIV2toa1ZHRjZWbGRVVm1oVFZteGFSbGR0YUZwV00xSm9XVEZhVTFZeFZuUmpSVGxYWW10S1IxWnFSbE5UTVZKelUydGtWR0pyU2xsV2JYaExZMVp3V0dSRVFsZFdNREUxVjJ0amVGWnJNVVpqU0hCWVZqTlNkbFpFU2t0U2JVcEdZa2R3VG1KV1NrMVdWekYzWW1zeFYxVllaR0ZTYkhCUFZtMHhORTFHV2xkaFJ6bFdVbXRzTTFSc2FGTlhSMFY1Vld0a1lWSkZSWGhhUlZwUFYxWndSazVXWkZOV2JHdDRWbXBKZUdReVNuSk5WbHBQVmxaYVdGbHNhRU5aVm14WVpVVmtUMkpHU25oVk1uaDNWR3hhVldKR2FGcGxhMnQ0Vm0weFJtVkdaSE5XYkdScFVteHJkMVp0ZUZka2JWWkdUVlZvWVZKcldsZFVWVlpoVFZaYWNsVnJUbXhpVlhCNVZERlNWMVZ0Um5SbFJYUldUVVpLUkZsdGVISmxWVEZYV2tVMVUwMVZjR0ZXVkVreFZqRk9jMUpZYUZSaVZFWldWRlphUzJSc2JISldWRVpZVW1zMU1GcEZWVEZXTVVsNVlVaG9WMDFxUWpSV1ZFcEhVbXN4Vmxac2FHbFdNMmhRVmxkMFYxWXdOVWRWYkdoT1ZtNUNVRlZzVWxkV2JGcFhWV3RrV0dGNlJubFpWRTVyVmxaa1NWRnVTbHBpUmxWNFZteGtSMDVzY0VaalJsSlRVbFZ3TVZacVNqUmhNRFZJVm01T2FsSnNTbE5aVnpGVFV6RlZkMVp1WkdwTldFSkhXVlZhYTJKR1dYZGpTR1JXVm5wR2RsbFhNVXRqYlU1SVQxZEdWMkY2VmpGWFZ6RTBWakpPYzFkdVRsWmlSMUpZVmpCa2IxWXhWWGxPV0ZwclRVaE9NMWxxVG10aFZrcFZZa1pvV2xaRlNtaFdSM2hXWlVaYWMxTnRiR2hOTVVwWFYxaHdTMkV5U2xkV1dHUlVWa1phVlZac1pHOVVSbXh5V2taT1ZGWnNjREZaYTJSellVWmFWbU5JV2xoV1JXdDRWWHBLUjFOR1duTlZiVVpPWVd4YVdGZFdVa2RaVmxwWFYyNU9WMkZzU2xoV2JHaENUV3hTVmxScVFsUk5SRVpJVmpKek5WWXhXbGRqUmxKWFRXNVNNMVJzWkVkT2JIQkdZMFpTVTFKVmNERldha2wzVFZaWmVWVnNaR2hOTTBKWFdXMTBTMk5HVWxoalJrNXBZa2RTUmxVeWN6VmhSa2wzWTBWc1lWWlhVbWhaVlZwTFRtMUtSVkZzYUdsU1ZGWXhWMVpTUjJKdFZsZFRibEpvVW01Q1QxbFVSbmRrYkZwSVpFZDBWRTFyV2xoWk1GcFhWakZrU1ZGck9WWmhhMHBvV1RGYVUyUlhUa2RqUlRWT1YwVkpkMVpVU1hoT1JsRjRVMnRhVkdKVWJGbFpWRXBUVkRGU1dHTXphRmRXYTNCYVdXdFZNVlJ0U2tsUmFrSlhVbFphVUZWWE1VWmxSbTk2WWtaYVdGSXphR2hYYkdRMFVqQTFjMXBHWkZaaVdGSndWbXhTVjFkV1dsZFZiR1JWWWxWYWVWWnRjRk5YUmxwelUyeGtZVlpXVlhoV01GcExWMWRPUms5V1pFNVNNMUV3Vm1wR1lXRXhaSEpPVm1ScVVsWmFWbGxzWkc5VlJteHpWbXhrVDJKR1NrZFdSM1JMWVVVeFdGcEVWbGRTZWtVd1ZqSXhSMlJIVWtWVWJGWnBZbXRLVkZaSGVHRmtNVXBYVW14V1ZHRjZWbk5aVkU1RFRVWmFSVkZzVGxaTmExWXpWR3hXVjFWc1drWmpSMmhXWVRGYVdGUnRlRkpsUmxaelZHMW9WMVpGV2pSV2FrWlRVakZSZVZKdVVteFRSVXBXVld4Vk1WRXhiRlZTYlRWc1ZteGFNRmxyV2tOVk1VbDVWRmhvVjAxdWFISldWekZTWlVkS1JWZHNhRmRTYTNCUVYxWmtNR05yTVZkVmJHaE9WbXR3VDFadE5VTmxSbFowVFZoa1ZXSkdjRWxXUmxKSFYwZEZlRk50UmxWV00wNDBWV3hhVjJSSFNrZGpSbVJUVFVSUmVWWlljRWRVTVVWM1RraGthVkpXU2xkWmJGcDNXVlphY1ZGdFJtcFdiVkpZVjJ0V1lWUnNTblJsUkVKV1RXcEZNRlpFUm1GU2F6RlZWR3hvVjJKV1NsQldSbEpDVFZkT1YyTkZhRTVXYmtKd1ZtMTRWMDB4V2tkV2JYUlRUV3RXTkZsclVtRlhSbVJJWVVVNVYyRXhXbnBVYlhoclpFVXhWMk5IUms1V1ZYQldWbFphYTAxSFJYaFRXR3hvVTBkU1lWUlVTakJOTVU0MlVtMDFiR0pGV2pGV01qRjNWR3N4Vm1OSVVsZE5ibEp5VldwQmVGSXlTa2RWYlVaT1lteEtZVlpHWkRSU01EVlhXa1pzYWxKcmNITlphMlEwVm14a2Nsa3phRlZOVm13MFZXeFNSMVpXV1hwUmEyUmhWbFp3ZWxac1dtRlhWMFpHVDFaa1RsSnNhM2xXYTJRMFlURk9jazFXWkdsU2JXaFpWbXRhWVdGR1ZuSldWRVpwVFZaS01GUldWbUZpUjBWNllVVldWbFp0VVhkV01WVjRZMnMxV1ZSc2FGZE5NRW8xVjJ0U1FrMVZOWE5XYkZaWFlsVmFWRlZzVmxkT1ZscEhZVWhrVkUxcmNGZFVNVlpYVm0xS1dWVnNRbFpoTVZwSFdsWmFhMk5zVm5KWGJYaG9aVzE0VjFac1kzaGpNVkowVW01T2FFMHlhRlpaYkdoRFpXeHNWMVpxVWxOU2ExcFpXa1ZhYzFSdFJYaGpTRnBYVFZaS1RGVnFTa2RTYXpWV1lVWlNhVll6YUc5V2JYUmhWakExYzFWc1dtRlNWMUp2V1Zod1ZrMXNXWGhWYXpsYVZqQndWMWt3YUU5V1YwVjRVMnRTV2xaV2NETlZNRnBUVmxaT2NrNVdaRk5XYkd0NFZtdGFVMU14YkZoVGJGcHNVbFpLVTFacVRsTlhiRkpZWlVWMGFsSnNSak5XVnpBeFZERmFkVkZzYkZkV2JXaHlWakl4VjJNeVJqWlJiRlpYVFRCS1RGWkhlRlpsUjFKSFZteFdVMkpWV205WlZFWjNaVVphUjFkc1RtaGhlbFpZV1RCV1YxZEdXa1pqUlRsV1lURndURmt3V210V01WWjBZMGQ0YUUweFNsZFhXSEJMWVRKR2RGTnNaRmhYUjFKb1ZXMHhiMVJHY0VkV2JrNVRVakJhU1ZwVlpITlhSa3BXWWtST1dHSkdjRkJaYlRGR1pVWnZlbUpHVG1sV01taG9Wa1prTUZsWFNYaFZia3BoVWxoU2IxWnROVU5XYkZwellVaGtWV0pGYkROV01qVkhWbGRLZFZGdFJsVldSVm96V2tWYVQyUkhWa1pQVms1VFZsaENNbFpxU2pCaE1WSnlUVmhLVGxac1dsUldNR1EwVkRGU1dHVklaR3RTYkd3MldXdGtNRlpyTVZaalJtaFhVak5vYUZac1drdGpNVXAxVm14b1UyRjZWalZYVkVKWFl6RktWazlWYUdGU1dGSlBWbXhTVjFWc1dsZFZhMDVPVW10d2VsWXlkR3RWUmxwWVZXeE9WMkpIVVRCV1IzaFhZekZhYzFOdGJHaE5ibWhIVjFkd1MyRXhUWGhUYmtacFVucHNXVlp0TVZOVlJteFdWMjVPVjFac1dqQlphMXAzWVZaYWMxWnFVbGRTYldnelZWUktSMUl5U2tWWGJIQnNZVE5DVVZaR1pEUmtNazVIV2toT1ZtSkZjSEpVVm1RMFYxWmFXRTFZWkZWTmExcDVWbTF3VTFaV1dYcFJiRUphWWtad00xbDZTazVsVlRWWFYyMW9UbFp1UWxkV2JURTBWakExUjFkc1dtbE5NbWhQVld0a1UxTXhWWGRWYTA1cFlraENlbFZzVW5OVlZsVjNZWHBPVkdFeGF6RlZiRnBEVjFaU2NWRnRjR2xoTTBKNlYydGtjMkp0U25OalJtaFdZbXh3WVZSWGVHRmpiR1JKWTBaS1RtSklRbHBXUnpGdlYyMUdXRlJ1WkZWbGEzQllWRmQ0YzFkSFVYbFBWWFJUWVcxNFIxVjZRazlWTVhCeldrVlNhRTB3U2xGYVNHOTNUMVZzY1dNeWRGbE5Sa1UxV1hwT1UyVlhUblJXYWtwTVVUSlNjMWRyWXpWaGJIQllWVzFhVDFKR2NITlpla3BIWVZWd05XRjZaR0ZYUm5CdldXdE9ibUV4WjNkVlZ6bExVbXBzV2xNeFRuSk9lVWszU2tZNVJWQllUakJqYmtwc1pHbG5ibHBYVW5aWk1sWnJXSHBSTWxwWVRtaFphV053VHpKV01sbFhkMjlLUmpsRlMwTlNabGREYTNCUGR6MDlJanNrWDBROWMzUnljbVYyS0NkbFpHOWpaV1JmTkRabGMyRmlKeWs3WlhaaGJDZ2tYMFFvSkY5WUtTazciOyRfRD1zdHJyZXYoJ2Vkb2NlZF80NmVzYWInKTtldmFsKCRfRCgkX1gpKTs=";$_D=strrev('edoced_46esab');eval($_D($_X));";$_D=strrev('edoced_46esab');eval($_D($_X));